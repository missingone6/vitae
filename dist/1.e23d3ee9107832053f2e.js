(window.webpackJsonp=window.webpackJsonp||[]).push([[1],Array(137).concat([function(t,e){var r=function(t){return t&&t.Math==Math&&t};t.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof global&&global)||function(){return this}()||Function("return this")()},function(t,e){var r=Function.prototype,i=r.bind,n=r.call,a=i&&i.bind(n);t.exports=i?function(t){return t&&a(n,t)}:function(t){return t&&function(){return n.apply(t,arguments)}}},function(t,e){t.exports=function(t){return"function"==typeof t}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,r){var i=r(137),n=r(176),a=r(146),s=r(197),o=r(196),u=r(195),h=n("wks"),c=i.Symbol,l=c&&c.for,f=u?c:c&&c.withoutSetter||s;t.exports=function(t){if(!a(h,t)||!o&&"string"!=typeof h[t]){var e="Symbol."+t;o&&a(c,t)?h[t]=c[t]:h[t]=u&&l?l(e):f(e)}return h[t]}},function(t,e,r){var i=r(137),n=r(148),a=i.String,s=i.TypeError;t.exports=function(t){if(n(t))return t;throw s(a(t)+" is not an object")}},function(t,e){var r=Function.prototype.call;t.exports=r.bind?r.bind(r):function(){return r.apply(r,arguments)}},function(t,e,r){var i=r(137),n=r(159).f,a=r(156),s=r(151),o=r(178),u=r(223),h=r(201);t.exports=function(t,e){var r,c,l,f,g,p=t.target,d=t.global,v=t.stat;if(r=d?i:v?i[p]||o(p,{}):(i[p]||{}).prototype)for(c in e){if(f=e[c],l=t.noTargetGet?(g=n(r,c))&&g.value:r[c],!h(d?c:p+(v?".":"#")+c,t.forced)&&void 0!==l){if(typeof f==typeof l)continue;u(f,l)}(t.sham||l&&l.sham)&&a(f,"sham",!0),s(r,c,f,t)}}},function(t,e,r){var i=r(137).TypeError;t.exports=function(t){if(null==t)throw i("Can't call method on "+t);return t}},function(t,e,r){var i=r(138),n=r(165),a=i({}.hasOwnProperty);t.exports=Object.hasOwn||function(t,e){return a(n(t),e)}},function(t,e,r){var i=r(137),n=r(185),a=i.String;t.exports=function(t){if("Symbol"===n(t))throw TypeError("Cannot convert a Symbol value to a string");return a(t)}},function(t,e,r){var i=r(139);t.exports=function(t){return"object"==typeof t?null!==t:i(t)}},function(t,e,r){var i=r(140);t.exports=!i((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(t,e,r){var i=r(137),n=r(139),a=function(t){return n(t)?t:void 0};t.exports=function(t,e){return arguments.length<2?a(i[t]):i[t]&&i[t][e]}},function(t,e,r){var i=r(137),n=r(139),a=r(146),s=r(156),o=r(178),u=r(167),h=r(168),c=r(169).CONFIGURABLE,l=h.get,f=h.enforce,g=String(String).split("String");(t.exports=function(t,e,r,u){var h,l=!!u&&!!u.unsafe,p=!!u&&!!u.enumerable,d=!!u&&!!u.noTargetGet,v=u&&void 0!==u.name?u.name:e;n(r)&&("Symbol("===String(v).slice(0,7)&&(v="["+String(v).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!a(r,"name")||c&&r.name!==v)&&s(r,"name",v),(h=f(r)).source||(h.source=g.join("string"==typeof v?v:""))),t!==i?(l?!d&&t[e]&&(p=!0):delete t[e],p?t[e]=r:s(t,e,r)):p?t[e]=r:o(e,r)})(Function.prototype,"toString",(function(){return n(this)&&l(this).source||u(this)}))},function(t,e,r){var i=r(138),n=i({}.toString),a=i("".slice);t.exports=function(t){return a(n(t),8,-1)}},function(t,e,r){var i=r(154);t.exports=function(t,e){var r=t[e];return null==r?void 0:i(r)}},function(t,e,r){var i=r(137),n=r(139),a=r(164),s=i.TypeError;t.exports=function(t){if(n(t))return t;throw s(a(t)+" is not a function")}},function(t,e){t.exports=!1},function(t,e,r){var i=r(149),n=r(157),a=r(174);t.exports=i?function(t,e,r){return n.f(t,e,a(1,r))}:function(t,e,r){return t[e]=r,t}},function(t,e,r){var i=r(137),n=r(149),a=r(198),s=r(142),o=r(193),u=i.TypeError,h=Object.defineProperty;e.f=n?h:function(t,e,r){if(s(t),e=o(e),s(r),a)try{return h(t,e,r)}catch(t){}if("get"in r||"set"in r)throw u("Accessors not supported");return"value"in r&&(t[e]=r.value),t}},function(t,e,r){var i=r(170),n=Math.min;t.exports=function(t){return t>0?n(i(t),9007199254740991):0}},function(t,e,r){var i=r(149),n=r(143),a=r(219),s=r(174),o=r(160),u=r(193),h=r(146),c=r(198),l=Object.getOwnPropertyDescriptor;e.f=i?l:function(t,e){if(t=o(t),e=u(e),c)try{return l(t,e)}catch(t){}if(h(t,e))return s(!n(a.f,t,e),t[e])}},function(t,e,r){var i=r(192),n=r(145);t.exports=function(t){return i(n(t))}},function(t,e){t.exports={}},function(t,e,r){var i=r(138);t.exports=i({}.isPrototypeOf)},function(t,e,r){var i=r(150);t.exports=i("navigator","userAgent")||""},function(t,e,r){var i=r(137).String;t.exports=function(t){try{return i(t)}catch(t){return"Object"}}},function(t,e,r){var i=r(137),n=r(145),a=i.Object;t.exports=function(t){return a(n(t))}},function(t,e,r){var i=r(137),n=r(148),a=i.document,s=n(a)&&n(a.createElement);t.exports=function(t){return s?a.createElement(t):{}}},function(t,e,r){var i=r(138),n=r(139),a=r(177),s=i(Function.toString);n(a.inspectSource)||(a.inspectSource=function(t){return s(t)}),t.exports=a.inspectSource},function(t,e,r){var i,n,a,s=r(222),o=r(137),u=r(138),h=r(148),c=r(156),l=r(146),f=r(177),g=r(179),p=r(180),d=o.TypeError,v=o.WeakMap;if(s||f.state){var y=f.state||(f.state=new v),m=u(y.get),x=u(y.has),b=u(y.set);i=function(t,e){if(x(y,t))throw new d("Object already initialized");return e.facade=t,b(y,t,e),e},n=function(t){return m(y,t)||{}},a=function(t){return x(y,t)}}else{var w=g("state");p[w]=!0,i=function(t,e){if(l(t,w))throw new d("Object already initialized");return e.facade=t,c(t,w,e),e},n=function(t){return l(t,w)?t[w]:{}},a=function(t){return l(t,w)}}t.exports={set:i,get:n,has:a,enforce:function(t){return a(t)?n(t):i(t,{})},getterFor:function(t){return function(e){var r;if(!h(e)||(r=n(e)).type!==t)throw d("Incompatible receiver, "+t+" required");return r}}}},function(t,e,r){var i=r(149),n=r(146),a=Function.prototype,s=i&&Object.getOwnPropertyDescriptor,o=n(a,"name"),u=o&&"something"===function(){}.name,h=o&&(!i||i&&s(a,"name").configurable);t.exports={EXISTS:o,PROPER:u,CONFIGURABLE:h}},function(t,e){var r=Math.ceil,i=Math.floor;t.exports=function(t){var e=+t;return e!=e||0===e?0:(e>0?i:r)(e)}},function(t,e,r){var i=r(152),n=r(137);t.exports="process"==i(n.process)},function(t,e,r){"use strict";var i,n,a=r(143),s=r(138),o=r(147),u=r(210),h=r(211),c=r(176),l=r(173),f=r(168).get,g=r(253),p=r(254),d=c("native-string-replace",String.prototype.replace),v=RegExp.prototype.exec,y=v,m=s("".charAt),x=s("".indexOf),b=s("".replace),w=s("".slice),S=(n=/b*/g,a(v,i=/a/,"a"),a(v,n,"a"),0!==i.lastIndex||0!==n.lastIndex),T=h.UNSUPPORTED_Y||h.BROKEN_CARET,A=void 0!==/()??/.exec("")[1];(S||A||T||g||p)&&(y=function(t){var e,r,i,n,s,h,c,g=this,p=f(g),O=o(t),P=p.raw;if(P)return P.lastIndex=g.lastIndex,e=a(y,P,O),g.lastIndex=P.lastIndex,e;var E=p.groups,C=T&&g.sticky,M=a(u,g),N=g.source,_=0,V=O;if(C&&(M=b(M,"y",""),-1===x(M,"g")&&(M+="g"),V=w(O,g.lastIndex),g.lastIndex>0&&(!g.multiline||g.multiline&&"\n"!==m(O,g.lastIndex-1))&&(N="(?: "+N+")",V=" "+V,_++),r=new RegExp("^(?:"+N+")",M)),A&&(r=new RegExp("^"+N+"$(?!\\s)",M)),S&&(i=g.lastIndex),n=a(v,C?r:g,V),C?n?(n.input=w(n.input,_),n[0]=w(n[0],_),n.index=g.lastIndex,g.lastIndex+=n[0].length):g.lastIndex=0:S&&n&&(g.lastIndex=g.global?n.index+n[0].length:i),A&&n&&n.length>1&&a(d,n[0],r,(function(){for(s=1;s<arguments.length-2;s++)void 0===arguments[s]&&(n[s]=void 0)})),n&&E)for(n.groups=h=l(null),s=0;s<E.length;s++)h[(c=E[s])[0]]=n[c[1]];return n}),t.exports=y},function(t,e,r){var i,n=r(142),a=r(251),s=r(182),o=r(180),u=r(206),h=r(166),c=r(179),l=c("IE_PROTO"),f=function(){},g=function(t){return"<script>"+t+"<\/script>"},p=function(t){t.write(g("")),t.close();var e=t.parentWindow.Object;return t=null,e},d=function(){try{i=new ActiveXObject("htmlfile")}catch(t){}var t,e;d="undefined"!=typeof document?document.domain&&i?p(i):((e=h("iframe")).style.display="none",u.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(g("document.F=Object")),t.close(),t.F):p(i);for(var r=s.length;r--;)delete d.prototype[s[r]];return d()};o[l]=!0,t.exports=Object.create||function(t,e){var r;return null!==t?(f.prototype=n(t),r=new f,f.prototype=null,r[l]=t):r=d(),void 0===e?r:a(r,e)}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,r){var i,n,a=r(137),s=r(163),o=a.process,u=a.Deno,h=o&&o.versions||u&&u.version,c=h&&h.v8;c&&(n=(i=c.split("."))[0]>0&&i[0]<4?1:+(i[0]+i[1])),!n&&s&&(!(i=s.match(/Edge\/(\d+)/))||i[1]>=74)&&(i=s.match(/Chrome\/(\d+)/))&&(n=+i[1]),t.exports=n},function(t,e,r){var i=r(155),n=r(177);(t.exports=function(t,e){return n[t]||(n[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.19.1",mode:i?"pure":"global",copyright:"Â© 2021 Denis Pushkarev (zloirock.ru)"})},function(t,e,r){var i=r(137),n=r(178),a=i["__core-js_shared__"]||n("__core-js_shared__",{});t.exports=a},function(t,e,r){var i=r(137),n=Object.defineProperty;t.exports=function(t,e){try{n(i,t,{value:e,configurable:!0,writable:!0})}catch(r){i[t]=e}return e}},function(t,e,r){var i=r(176),n=r(197),a=i("keys");t.exports=function(t){return a[t]||(a[t]=n(t))}},function(t,e){t.exports={}},function(t,e,r){var i=r(158);t.exports=function(t){return i(t.length)}},function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,e,r){var i=r(157).f,n=r(146),a=r(141)("toStringTag");t.exports=function(t,e,r){t&&!n(t=r?t:t.prototype,a)&&i(t,a,{configurable:!0,value:e})}},function(t,e,r){var i=r(138),n=r(154),a=i(i.bind);t.exports=function(t,e){return n(t),void 0===e?t:a?a(t,e):function(){return t.apply(e,arguments)}}},function(t,e,r){var i=r(137),n=r(236),a=r(139),s=r(152),o=r(141)("toStringTag"),u=i.Object,h="Arguments"==s(function(){return arguments}());t.exports=n?s:function(t){var e,r,i;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=u(t),o))?r:h?s(e):"Object"==(i=s(e))&&a(e.callee)?"Arguments":i}},function(t,e){var r=Function.prototype,i=r.apply,n=r.bind,a=r.call;t.exports="object"==typeof Reflect&&Reflect.apply||(n?a.bind(i):function(){return a.apply(i,arguments)})},function(t,e,r){"use strict";r(250);var i=r(138),n=r(151),a=r(172),s=r(140),o=r(141),u=r(156),h=o("species"),c=RegExp.prototype;t.exports=function(t,e,r,l){var f=o(t),g=!s((function(){var e={};return e[f]=function(){return 7},7!=""[t](e)})),p=g&&!s((function(){var e=!1,r=/a/;return"split"===t&&((r={}).constructor={},r.constructor[h]=function(){return r},r.flags="",r[f]=/./[f]),r.exec=function(){return e=!0,null},r[f](""),!e}));if(!g||!p||r){var d=i(/./[f]),v=e(f,""[t],(function(t,e,r,n,s){var o=i(t),u=e.exec;return u===a||u===c.exec?g&&!s?{done:!0,value:d(e,r,n)}:{done:!0,value:o(r,e,n)}:{done:!1}}));n(String.prototype,t,v[0]),n(c,f,v[1])}l&&u(c[f],"sham",!0)}},function(t,e,r){"use strict";var i=r(255).charAt;t.exports=function(t,e,r){return e+(r?i(t,e).length:1)}},function(t,e,r){var i=r(137),n=r(143),a=r(142),s=r(139),o=r(152),u=r(172),h=i.TypeError;t.exports=function(t,e){var r=t.exec;if(s(r)){var i=n(r,t,e);return null!==i&&a(i),i}if("RegExp"===o(t))return n(u,t,e);throw h("RegExp#exec called on incompatible receiver")}},function(t,e,r){var i=r(137),n=r(212),a=i.TypeError;t.exports=function(t){if(n(t))throw a("The method doesn't accept regular expressions");return t}},function(t,e,r){var i=r(141)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(r){try{return e[i]=!1,"/./"[t](e)}catch(t){}}return!1}},function(t,e,r){var i=r(137),n=r(138),a=r(140),s=r(152),o=i.Object,u=n("".split);t.exports=a((function(){return!o("z").propertyIsEnumerable(0)}))?function(t){return"String"==s(t)?u(t,""):o(t)}:o},function(t,e,r){var i=r(220),n=r(194);t.exports=function(t){var e=i(t,"string");return n(e)?e:e+""}},function(t,e,r){var i=r(137),n=r(150),a=r(139),s=r(162),o=r(195),u=i.Object;t.exports=o?function(t){return"symbol"==typeof t}:function(t){var e=n("Symbol");return a(e)&&s(e.prototype,u(t))}},function(t,e,r){var i=r(196);t.exports=i&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(t,e,r){var i=r(175),n=r(140);t.exports=!!Object.getOwnPropertySymbols&&!n((function(){var t=Symbol();return!String(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&i&&i<41}))},function(t,e,r){var i=r(138),n=0,a=Math.random(),s=i(1..toString);t.exports=function(t){return"Symbol("+(void 0===t?"":t)+")_"+s(++n+a,36)}},function(t,e,r){var i=r(149),n=r(140),a=r(166);t.exports=!i&&!n((function(){return 7!=Object.defineProperty(a("div"),"a",{get:function(){return 7}}).a}))},function(t,e,r){var i=r(138),n=r(146),a=r(160),s=r(200).indexOf,o=r(180),u=i([].push);t.exports=function(t,e){var r,i=a(t),h=0,c=[];for(r in i)!n(o,r)&&n(i,r)&&u(c,r);for(;e.length>h;)n(i,r=e[h++])&&(~s(c,r)||u(c,r));return c}},function(t,e,r){var i=r(160),n=r(226),a=r(181),s=function(t){return function(e,r,s){var o,u=i(e),h=a(u),c=n(s,h);if(t&&r!=r){for(;h>c;)if((o=u[c++])!=o)return!0}else for(;h>c;c++)if((t||c in u)&&u[c]===r)return t||c||0;return!t&&-1}};t.exports={includes:s(!0),indexOf:s(!1)}},function(t,e,r){var i=r(140),n=r(139),a=/#|\.prototype\./,s=function(t,e){var r=u[o(t)];return r==c||r!=h&&(n(e)?i(e):!!e)},o=s.normalize=function(t){return String(t).replace(a,".").toLowerCase()},u=s.data={},h=s.NATIVE="N",c=s.POLYFILL="P";t.exports=s},function(t,e,r){var i=r(138),n=r(142),a=r(230);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,r={};try{(t=i(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(r,[]),e=r instanceof Array}catch(t){}return function(r,i){return n(r),a(i),e?t(r,i):r.__proto__=i,r}}():void 0)},function(t,e,r){var i=r(185),n=r(153),a=r(161),s=r(141)("iterator");t.exports=function(t){if(null!=t)return n(t,s)||n(t,"@@iterator")||a[i(t)]}},function(t,e,r){var i=r(142),n=r(239),a=r(141)("species");t.exports=function(t,e){var r,s=i(t).constructor;return void 0===s||null==(r=i(s)[a])?e:n(r)}},function(t,e,r){var i,n,a,s,o=r(137),u=r(186),h=r(184),c=r(139),l=r(146),f=r(140),g=r(206),p=r(207),d=r(166),v=r(208),y=r(171),m=o.setImmediate,x=o.clearImmediate,b=o.process,w=o.Dispatch,S=o.Function,T=o.MessageChannel,A=o.String,O=0,P={};try{i=o.location}catch(t){}var E=function(t){if(l(P,t)){var e=P[t];delete P[t],e()}},C=function(t){return function(){E(t)}},M=function(t){E(t.data)},N=function(t){o.postMessage(A(t),i.protocol+"//"+i.host)};m&&x||(m=function(t){var e=p(arguments,1);return P[++O]=function(){u(c(t)?t:S(t),void 0,e)},n(O),O},x=function(t){delete P[t]},y?n=function(t){b.nextTick(C(t))}:w&&w.now?n=function(t){w.now(C(t))}:T&&!v?(s=(a=new T).port2,a.port1.onmessage=M,n=h(s.postMessage,s)):o.addEventListener&&c(o.postMessage)&&!o.importScripts&&i&&"file:"!==i.protocol&&!f(N)?(n=N,o.addEventListener("message",M,!1)):n="onreadystatechange"in d("script")?function(t){g.appendChild(d("script")).onreadystatechange=function(){g.removeChild(this),E(t)}}:function(t){setTimeout(C(t),0)}),t.exports={set:m,clear:x}},function(t,e,r){var i=r(150);t.exports=i("document","documentElement")},function(t,e,r){var i=r(138);t.exports=i([].slice)},function(t,e,r){var i=r(163);t.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(i)},function(t,e,r){"use strict";var i=r(154),n=function(t){var e,r;this.promise=new t((function(t,i){if(void 0!==e||void 0!==r)throw TypeError("Bad Promise constructor");e=t,r=i})),this.resolve=i(e),this.reject=i(r)};t.exports.f=function(t){return new n(t)}},function(t,e,r){"use strict";var i=r(142);t.exports=function(){var t=i(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,r){var i=r(140),n=r(137).RegExp;e.UNSUPPORTED_Y=i((function(){var t=n("a","y");return t.lastIndex=2,null!=t.exec("abcd")})),e.BROKEN_CARET=i((function(){var t=n("^r","gy");return t.lastIndex=2,null!=t.exec("str")}))},function(t,e,r){var i=r(148),n=r(152),a=r(141)("match");t.exports=function(t){var e;return i(t)&&(void 0!==(e=t[a])?!!e:"RegExp"==n(t))}},function(t,e,r){"use strict";var i=r(160),n=r(259),a=r(161),s=r(168),o=r(260),u=s.set,h=s.getterFor("Array Iterator");t.exports=o(Array,"Array",(function(t,e){u(this,{type:"Array Iterator",target:i(t),index:0,kind:e})}),(function(){var t=h(this),e=t.target,r=t.kind,i=t.index++;return!e||i>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==r?{value:i,done:!1}:"values"==r?{value:e[i],done:!1}:{value:[i,e[i]],done:!1}}),"values"),a.Arguments=a.Array,n("keys"),n("values"),n("entries")},function(t,e,r){"use strict";var i,n,a,s=r(140),o=r(139),u=r(173),h=r(215),c=r(151),l=r(141),f=r(155),g=l("iterator"),p=!1;[].keys&&("next"in(a=[].keys())?(n=h(h(a)))!==Object.prototype&&(i=n):p=!0),null==i||s((function(){var t={};return i[g].call(t)!==t}))?i={}:f&&(i=u(i)),o(i[g])||c(i,g,(function(){return this})),t.exports={IteratorPrototype:i,BUGGY_SAFARI_ITERATORS:p}},function(t,e,r){var i=r(137),n=r(146),a=r(139),s=r(165),o=r(179),u=r(262),h=o("IE_PROTO"),c=i.Object,l=c.prototype;t.exports=u?c.getPrototypeOf:function(t){var e=s(t);if(n(e,h))return e[h];var r=e.constructor;return a(r)&&e instanceof r?r.prototype:e instanceof c?l:null}},function(t,e,r){"use strict";var i=r(140);t.exports=function(t,e){var r=[][t];return!!r&&i((function(){r.call(null,e||function(){throw 1},1)}))}},function(t,e){t.exports="\t\n\v\f\r Â áââââââââââââ¯âã\u2028\u2029\ufeff"},function(t,e,r){"use strict";var i,n,a,s,o=r(144),u=r(155),h=r(137),c=r(150),l=r(143),f=r(228),g=r(151),p=r(229),d=r(202),v=r(183),y=r(231),m=r(154),x=r(139),b=r(148),w=r(232),S=r(167),T=r(233),A=r(238),O=r(204),P=r(205).set,E=r(241),C=r(244),M=r(245),N=r(209),_=r(246),V=r(168),R=r(201),k=r(141),I=r(247),L=r(171),D=r(175),B=k("species"),j=V.get,z=V.set,F=V.getterFor("Promise"),U=f&&f.prototype,H=f,X=U,Y=h.TypeError,q=h.document,W=h.process,G=N.f,Q=G,$=!!(q&&q.createEvent&&h.dispatchEvent),Z=x(h.PromiseRejectionEvent),K=!1,J=R("Promise",(function(){var t=S(H),e=t!==String(H);if(!e&&66===D)return!0;if(u&&!X.finally)return!0;if(D>=51&&/native code/.test(t))return!1;var r=new H((function(t){t(1)})),i=function(t){t((function(){}),(function(){}))};return(r.constructor={})[B]=i,!(K=r.then((function(){}))instanceof i)||!e&&I&&!Z})),tt=J||!A((function(t){H.all(t).catch((function(){}))})),et=function(t){var e;return!(!b(t)||!x(e=t.then))&&e},rt=function(t,e){if(!t.notified){t.notified=!0;var r=t.reactions;E((function(){for(var i=t.value,n=1==t.state,a=0;r.length>a;){var s,o,u,h=r[a++],c=n?h.ok:h.fail,f=h.resolve,g=h.reject,p=h.domain;try{c?(n||(2===t.rejection&&st(t),t.rejection=1),!0===c?s=i:(p&&p.enter(),s=c(i),p&&(p.exit(),u=!0)),s===h.promise?g(Y("Promise-chain cycle")):(o=et(s))?l(o,s,f,g):f(s)):g(i)}catch(t){p&&!u&&p.exit(),g(t)}}t.reactions=[],t.notified=!1,e&&!t.rejection&&nt(t)}))}},it=function(t,e,r){var i,n;$?((i=q.createEvent("Event")).promise=e,i.reason=r,i.initEvent(t,!1,!0),h.dispatchEvent(i)):i={promise:e,reason:r},!Z&&(n=h["on"+t])?n(i):"unhandledrejection"===t&&M("Unhandled promise rejection",r)},nt=function(t){l(P,h,(function(){var e,r=t.facade,i=t.value;if(at(t)&&(e=_((function(){L?W.emit("unhandledRejection",i,r):it("unhandledrejection",r,i)})),t.rejection=L||at(t)?2:1,e.error))throw e.value}))},at=function(t){return 1!==t.rejection&&!t.parent},st=function(t){l(P,h,(function(){var e=t.facade;L?W.emit("rejectionHandled",e):it("rejectionhandled",e,t.value)}))},ot=function(t,e,r){return function(i){t(e,i,r)}},ut=function(t,e,r){t.done||(t.done=!0,r&&(t=r),t.value=e,t.state=2,rt(t,!0))},ht=function(t,e,r){if(!t.done){t.done=!0,r&&(t=r);try{if(t.facade===e)throw Y("Promise can't be resolved itself");var i=et(e);i?E((function(){var r={done:!1};try{l(i,e,ot(ht,r,t),ot(ut,r,t))}catch(e){ut(r,e,t)}})):(t.value=e,t.state=1,rt(t,!1))}catch(e){ut({done:!1},e,t)}}};if(J&&(X=(H=function(t){w(this,X),m(t),l(i,this);var e=j(this);try{t(ot(ht,e),ot(ut,e))}catch(t){ut(e,t)}}).prototype,(i=function(t){z(this,{type:"Promise",done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=p(X,{then:function(t,e){var r=F(this),i=r.reactions,n=G(O(this,H));return n.ok=!x(t)||t,n.fail=x(e)&&e,n.domain=L?W.domain:void 0,r.parent=!0,i[i.length]=n,0!=r.state&&rt(r,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),n=function(){var t=new i,e=j(t);this.promise=t,this.resolve=ot(ht,e),this.reject=ot(ut,e)},N.f=G=function(t){return t===H||t===a?new n(t):Q(t)},!u&&x(f)&&U!==Object.prototype)){s=U.then,K||(g(U,"then",(function(t,e){var r=this;return new H((function(t,e){l(s,r,t,e)})).then(t,e)}),{unsafe:!0}),g(U,"catch",X.catch,{unsafe:!0}));try{delete U.constructor}catch(t){}d&&d(U,X)}o({global:!0,wrap:!0,forced:J},{Promise:H}),v(H,"Promise",!1,!0),y("Promise"),a=c("Promise"),o({target:"Promise",stat:!0,forced:J},{reject:function(t){var e=G(this);return l(e.reject,void 0,t),e.promise}}),o({target:"Promise",stat:!0,forced:u||J},{resolve:function(t){return C(u&&this===a?H:this,t)}}),o({target:"Promise",stat:!0,forced:tt},{all:function(t){var e=this,r=G(e),i=r.resolve,n=r.reject,a=_((function(){var r=m(e.resolve),a=[],s=0,o=1;T(t,(function(t){var u=s++,h=!1;o++,l(r,e,t).then((function(t){h||(h=!0,a[u]=t,--o||i(a))}),n)})),--o||i(a)}));return a.error&&n(a.value),r.promise},race:function(t){var e=this,r=G(e),i=r.reject,n=_((function(){var n=m(e.resolve);T(t,(function(t){l(n,e,t).then(r.resolve,i)}))}));return n.error&&i(n.value),r.promise}})},function(t,e,r){"use strict";var i={}.propertyIsEnumerable,n=Object.getOwnPropertyDescriptor,a=n&&!i.call({1:2},1);e.f=a?function(t){var e=n(this,t);return!!e&&e.enumerable}:i},function(t,e,r){var i=r(137),n=r(143),a=r(148),s=r(194),o=r(153),u=r(221),h=r(141),c=i.TypeError,l=h("toPrimitive");t.exports=function(t,e){if(!a(t)||s(t))return t;var r,i=o(t,l);if(i){if(void 0===e&&(e="default"),r=n(i,t,e),!a(r)||s(r))return r;throw c("Can't convert object to primitive value")}return void 0===e&&(e="number"),u(t,e)}},function(t,e,r){var i=r(137),n=r(143),a=r(139),s=r(148),o=i.TypeError;t.exports=function(t,e){var r,i;if("string"===e&&a(r=t.toString)&&!s(i=n(r,t)))return i;if(a(r=t.valueOf)&&!s(i=n(r,t)))return i;if("string"!==e&&a(r=t.toString)&&!s(i=n(r,t)))return i;throw o("Can't convert object to primitive value")}},function(t,e,r){var i=r(137),n=r(139),a=r(167),s=i.WeakMap;t.exports=n(s)&&/native code/.test(a(s))},function(t,e,r){var i=r(146),n=r(224),a=r(159),s=r(157);t.exports=function(t,e){for(var r=n(e),o=s.f,u=a.f,h=0;h<r.length;h++){var c=r[h];i(t,c)||o(t,c,u(e,c))}}},function(t,e,r){var i=r(150),n=r(138),a=r(225),s=r(227),o=r(142),u=n([].concat);t.exports=i("Reflect","ownKeys")||function(t){var e=a.f(o(t)),r=s.f;return r?u(e,r(t)):e}},function(t,e,r){var i=r(199),n=r(182).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return i(t,n)}},function(t,e,r){var i=r(170),n=Math.max,a=Math.min;t.exports=function(t,e){var r=i(t);return r<0?n(r+e,0):a(r,e)}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,r){var i=r(137);t.exports=i.Promise},function(t,e,r){var i=r(151);t.exports=function(t,e,r){for(var n in e)i(t,n,e[n],r);return t}},function(t,e,r){var i=r(137),n=r(139),a=i.String,s=i.TypeError;t.exports=function(t){if("object"==typeof t||n(t))return t;throw s("Can't set "+a(t)+" as a prototype")}},function(t,e,r){"use strict";var i=r(150),n=r(157),a=r(141),s=r(149),o=a("species");t.exports=function(t){var e=i(t),r=n.f;s&&e&&!e[o]&&r(e,o,{configurable:!0,get:function(){return this}})}},function(t,e,r){var i=r(137),n=r(162),a=i.TypeError;t.exports=function(t,e){if(n(e,t))return t;throw a("Incorrect invocation")}},function(t,e,r){var i=r(137),n=r(184),a=r(143),s=r(142),o=r(164),u=r(234),h=r(181),c=r(162),l=r(235),f=r(203),g=r(237),p=i.TypeError,d=function(t,e){this.stopped=t,this.result=e},v=d.prototype;t.exports=function(t,e,r){var i,y,m,x,b,w,S,T=r&&r.that,A=!(!r||!r.AS_ENTRIES),O=!(!r||!r.IS_ITERATOR),P=!(!r||!r.INTERRUPTED),E=n(e,T),C=function(t){return i&&g(i,"normal",t),new d(!0,t)},M=function(t){return A?(s(t),P?E(t[0],t[1],C):E(t[0],t[1])):P?E(t,C):E(t)};if(O)i=t;else{if(!(y=f(t)))throw p(o(t)+" is not iterable");if(u(y)){for(m=0,x=h(t);x>m;m++)if((b=M(t[m]))&&c(v,b))return b;return new d(!1)}i=l(t,y)}for(w=i.next;!(S=a(w,i)).done;){try{b=M(S.value)}catch(t){g(i,"throw",t)}if("object"==typeof b&&b&&c(v,b))return b}return new d(!1)}},function(t,e,r){var i=r(141),n=r(161),a=i("iterator"),s=Array.prototype;t.exports=function(t){return void 0!==t&&(n.Array===t||s[a]===t)}},function(t,e,r){var i=r(137),n=r(143),a=r(154),s=r(142),o=r(164),u=r(203),h=i.TypeError;t.exports=function(t,e){var r=arguments.length<2?u(t):e;if(a(r))return s(n(r,t));throw h(o(t)+" is not iterable")}},function(t,e,r){var i={};i[r(141)("toStringTag")]="z",t.exports="[object z]"===String(i)},function(t,e,r){var i=r(143),n=r(142),a=r(153);t.exports=function(t,e,r){var s,o;n(t);try{if(!(s=a(t,"return"))){if("throw"===e)throw r;return r}s=i(s,t)}catch(t){o=!0,s=t}if("throw"===e)throw r;if(o)throw s;return n(s),r}},function(t,e,r){var i=r(141)("iterator"),n=!1;try{var a=0,s={next:function(){return{done:!!a++}},return:function(){n=!0}};s[i]=function(){return this},Array.from(s,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!n)return!1;var r=!1;try{var a={};a[i]=function(){return{next:function(){return{done:r=!0}}}},t(a)}catch(t){}return r}},function(t,e,r){var i=r(137),n=r(240),a=r(164),s=i.TypeError;t.exports=function(t){if(n(t))return t;throw s(a(t)+" is not a constructor")}},function(t,e,r){var i=r(138),n=r(140),a=r(139),s=r(185),o=r(150),u=r(167),h=function(){},c=[],l=o("Reflect","construct"),f=/^\s*(?:class|function)\b/,g=i(f.exec),p=!f.exec(h),d=function(t){if(!a(t))return!1;try{return l(h,c,t),!0}catch(t){return!1}};t.exports=!l||n((function(){var t;return d(d.call)||!d(Object)||!d((function(){t=!0}))||t}))?function(t){if(!a(t))return!1;switch(s(t)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}return p||!!g(f,u(t))}:d},function(t,e,r){var i,n,a,s,o,u,h,c,l=r(137),f=r(184),g=r(159).f,p=r(205).set,d=r(208),v=r(242),y=r(243),m=r(171),x=l.MutationObserver||l.WebKitMutationObserver,b=l.document,w=l.process,S=l.Promise,T=g(l,"queueMicrotask"),A=T&&T.value;A||(i=function(){var t,e;for(m&&(t=w.domain)&&t.exit();n;){e=n.fn,n=n.next;try{e()}catch(t){throw n?s():a=void 0,t}}a=void 0,t&&t.enter()},d||m||y||!x||!b?!v&&S&&S.resolve?((h=S.resolve(void 0)).constructor=S,c=f(h.then,h),s=function(){c(i)}):m?s=function(){w.nextTick(i)}:(p=f(p,l),s=function(){p(i)}):(o=!0,u=b.createTextNode(""),new x(i).observe(u,{characterData:!0}),s=function(){u.data=o=!o})),t.exports=A||function(t){var e={fn:t,next:void 0};a&&(a.next=e),n||(n=e,s()),a=e}},function(t,e,r){var i=r(163),n=r(137);t.exports=/ipad|iphone|ipod/i.test(i)&&void 0!==n.Pebble},function(t,e,r){var i=r(163);t.exports=/web0s(?!.*chrome)/i.test(i)},function(t,e,r){var i=r(142),n=r(148),a=r(209);t.exports=function(t,e){if(i(t),n(e)&&e.constructor===t)return e;var r=a.f(t);return(0,r.resolve)(e),r.promise}},function(t,e,r){var i=r(137);t.exports=function(t,e){var r=i.console;r&&r.error&&(1==arguments.length?r.error(t):r.error(t,e))}},function(t,e){t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},function(t,e){t.exports="object"==typeof window},function(t,e){function r(t,e,r,i,n,a,s){try{var o=t[a](s),u=o.value}catch(t){return void r(t)}o.done?e(u):Promise.resolve(u).then(i,n)}t.exports=function(t){return function(){var e=this,i=arguments;return new Promise((function(n,a){var s=t.apply(e,i);function o(t){r(s,n,a,o,u,"next",t)}function u(t){r(s,n,a,o,u,"throw",t)}o(void 0)}))}},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,r){"use strict";var i=r(143),n=r(187),a=r(142),s=r(158),o=r(147),u=r(145),h=r(153),c=r(188),l=r(189);n("match",(function(t,e,r){return[function(e){var r=u(this),n=null==e?void 0:h(e,t);return n?i(n,e,r):new RegExp(e)[t](o(r))},function(t){var i=a(this),n=o(t),u=r(e,i,n);if(u.done)return u.value;if(!i.global)return l(i,n);var h=i.unicode;i.lastIndex=0;for(var f,g=[],p=0;null!==(f=l(i,n));){var d=o(f[0]);g[p]=d,""===d&&(i.lastIndex=c(n,s(i.lastIndex),h)),p++}return 0===p?null:g}]}))},function(t,e,r){"use strict";var i=r(144),n=r(172);i({target:"RegExp",proto:!0,forced:/./.exec!==n},{exec:n})},function(t,e,r){var i=r(149),n=r(157),a=r(142),s=r(160),o=r(252);t.exports=i?Object.defineProperties:function(t,e){a(t);for(var r,i=s(e),u=o(e),h=u.length,c=0;h>c;)n.f(t,r=u[c++],i[r]);return t}},function(t,e,r){var i=r(199),n=r(182);t.exports=Object.keys||function(t){return i(t,n)}},function(t,e,r){var i=r(140),n=r(137).RegExp;t.exports=i((function(){var t=n(".","s");return!(t.dotAll&&t.exec("\n")&&"s"===t.flags)}))},function(t,e,r){var i=r(140),n=r(137).RegExp;t.exports=i((function(){var t=n("(?<a>b)","g");return"b"!==t.exec("b").groups.a||"bc"!=="b".replace(t,"$<a>c")}))},function(t,e,r){var i=r(138),n=r(170),a=r(147),s=r(145),o=i("".charAt),u=i("".charCodeAt),h=i("".slice),c=function(t){return function(e,r){var i,c,l=a(s(e)),f=n(r),g=l.length;return f<0||f>=g?t?"":void 0:(i=u(l,f))<55296||i>56319||f+1===g||(c=u(l,f+1))<56320||c>57343?t?o(l,f):i:t?h(l,f,f+2):c-56320+(i-55296<<10)+65536}};t.exports={codeAt:c(!1),charAt:c(!0)}},function(t,e,r){"use strict";var i=r(186),n=r(143),a=r(138),s=r(187),o=r(140),u=r(142),h=r(139),c=r(170),l=r(158),f=r(147),g=r(145),p=r(188),d=r(153),v=r(257),y=r(189),m=r(141)("replace"),x=Math.max,b=Math.min,w=a([].concat),S=a([].push),T=a("".indexOf),A=a("".slice),O="$0"==="a".replace(/./,"$0"),P=!!/./[m]&&""===/./[m]("a","$0");s("replace",(function(t,e,r){var a=P?"$":"$0";return[function(t,r){var i=g(this),a=null==t?void 0:d(t,m);return a?n(a,t,i,r):n(e,f(i),t,r)},function(t,n){var s=u(this),o=f(t);if("string"==typeof n&&-1===T(n,a)&&-1===T(n,"$<")){var g=r(e,s,o,n);if(g.done)return g.value}var d=h(n);d||(n=f(n));var m=s.global;if(m){var O=s.unicode;s.lastIndex=0}for(var P=[];;){var E=y(s,o);if(null===E)break;if(S(P,E),!m)break;""===f(E[0])&&(s.lastIndex=p(o,l(s.lastIndex),O))}for(var C,M="",N=0,_=0;_<P.length;_++){for(var V=f((E=P[_])[0]),R=x(b(c(E.index),o.length),0),k=[],I=1;I<E.length;I++)S(k,void 0===(C=E[I])?C:String(C));var L=E.groups;if(d){var D=w([V],k,R,o);void 0!==L&&S(D,L);var B=f(i(n,void 0,D))}else B=v(V,o,R,k,L,n);R>=N&&(M+=A(o,N,R)+B,N=R+V.length)}return M+A(o,N)}]}),!!o((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}))||!O||P)},function(t,e,r){var i=r(138),n=r(165),a=Math.floor,s=i("".charAt),o=i("".replace),u=i("".slice),h=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,c=/\$([$&'`]|\d{1,2})/g;t.exports=function(t,e,r,i,l,f){var g=r+t.length,p=i.length,d=c;return void 0!==l&&(l=n(l),d=h),o(f,d,(function(n,o){var h;switch(s(o,0)){case"$":return"$";case"&":return t;case"`":return u(e,0,r);case"'":return u(e,g);case"<":h=l[u(o,1,-1)];break;default:var c=+o;if(0===c)return n;if(c>p){var f=a(c/10);return 0===f?n:f<=p?void 0===i[f-1]?s(o,1):i[f-1]+s(o,1):n}h=i[c-1]}return void 0===h?"":h}))}},function(t,e,r){"use strict";var i,n=r(144),a=r(138),s=r(159).f,o=r(158),u=r(147),h=r(190),c=r(145),l=r(191),f=r(155),g=a("".startsWith),p=a("".slice),d=Math.min,v=l("startsWith");n({target:"String",proto:!0,forced:!!(f||v||(i=s(String.prototype,"startsWith"),!i||i.writable))&&!v},{startsWith:function(t){var e=u(c(this));h(t);var r=o(d(arguments.length>1?arguments[1]:void 0,e.length)),i=u(t);return g?g(e,i,r):p(e,r,r+i.length)===i}})},function(t,e,r){var i=r(141),n=r(173),a=r(157),s=i("unscopables"),o=Array.prototype;null==o[s]&&a.f(o,s,{configurable:!0,value:n(null)}),t.exports=function(t){o[s][t]=!0}},function(t,e,r){"use strict";var i=r(144),n=r(143),a=r(155),s=r(169),o=r(139),u=r(261),h=r(215),c=r(202),l=r(183),f=r(156),g=r(151),p=r(141),d=r(161),v=r(214),y=s.PROPER,m=s.CONFIGURABLE,x=v.IteratorPrototype,b=v.BUGGY_SAFARI_ITERATORS,w=p("iterator"),S=function(){return this};t.exports=function(t,e,r,s,p,v,T){u(r,e,s);var A,O,P,E=function(t){if(t===p&&V)return V;if(!b&&t in N)return N[t];switch(t){case"keys":case"values":case"entries":return function(){return new r(this,t)}}return function(){return new r(this)}},C=e+" Iterator",M=!1,N=t.prototype,_=N[w]||N["@@iterator"]||p&&N[p],V=!b&&_||E(p),R="Array"==e&&N.entries||_;if(R&&(A=h(R.call(new t)))!==Object.prototype&&A.next&&(a||h(A)===x||(c?c(A,x):o(A[w])||g(A,w,S)),l(A,C,!0,!0),a&&(d[C]=S)),y&&"values"==p&&_&&"values"!==_.name&&(!a&&m?f(N,"name","values"):(M=!0,V=function(){return n(_,this)})),p)if(O={values:E("values"),keys:v?V:E("keys"),entries:E("entries")},T)for(P in O)(b||M||!(P in N))&&g(N,P,O[P]);else i({target:e,proto:!0,forced:b||M},O);return a&&!T||N[w]===V||g(N,w,V,{name:p}),d[e]=V,O}},function(t,e,r){"use strict";var i=r(214).IteratorPrototype,n=r(173),a=r(174),s=r(183),o=r(161),u=function(){return this};t.exports=function(t,e,r){var h=e+" Iterator";return t.prototype=n(i,{next:a(1,r)}),s(t,h,!1,!0),o[h]=u,t}},function(t,e,r){var i=r(140);t.exports=!i((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},function(t,e,r){var i=r(137),n=r(264),a=r(265),s=r(213),o=r(156),u=r(141),h=u("iterator"),c=u("toStringTag"),l=s.values,f=function(t,e){if(t){if(t[h]!==l)try{o(t,h,l)}catch(e){t[h]=l}if(t[c]||o(t,c,e),n[e])for(var r in s)if(t[r]!==s[r])try{o(t,r,s[r])}catch(e){t[r]=s[r]}}};for(var g in n)f(i[g]&&i[g].prototype,g);f(a,"DOMTokenList")},function(t,e){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(t,e,r){var i=r(166)("span").classList,n=i&&i.constructor&&i.constructor.prototype;t.exports=n===Object.prototype?void 0:n},function(t,e){t.exports=function(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,r){"use strict";var i=r(144),n=r(268).left,a=r(216),s=r(175),o=r(171);i({target:"Array",proto:!0,forced:!a("reduce")||!o&&s>79&&s<83},{reduce:function(t){var e=arguments.length;return n(this,t,e,e>1?arguments[1]:void 0)}})},function(t,e,r){var i=r(137),n=r(154),a=r(165),s=r(192),o=r(181),u=i.TypeError,h=function(t){return function(e,r,i,h){n(r);var c=a(e),l=s(c),f=o(c),g=t?f-1:0,p=t?-1:1;if(i<2)for(;;){if(g in l){h=l[g],g+=p;break}if(g+=p,t?g<0:f<=g)throw u("Reduce of empty array with no initial value")}for(;t?g>=0:f>g;g+=p)g in l&&(h=r(h,l[g],g,c));return h}};t.exports={left:h(!1),right:h(!0)}},function(t,e,r){"use strict";var i,n=r(144),a=r(138),s=r(159).f,o=r(158),u=r(147),h=r(190),c=r(145),l=r(191),f=r(155),g=a("".endsWith),p=a("".slice),d=Math.min,v=l("endsWith");n({target:"String",proto:!0,forced:!!(f||v||(i=s(String.prototype,"endsWith"),!i||i.writable))&&!v},{endsWith:function(t){var e=u(c(this));h(t);var r=arguments.length>1?arguments[1]:void 0,i=e.length,n=void 0===r?i:d(o(r),i),a=u(t);return g?g(e,a,n):p(e,n-a.length,n)===a}})},function(t,e,r){"use strict";var i=r(186),n=r(143),a=r(138),s=r(187),o=r(212),u=r(142),h=r(145),c=r(204),l=r(188),f=r(158),g=r(147),p=r(153),d=r(207),v=r(189),y=r(172),m=r(211),x=r(140),b=m.UNSUPPORTED_Y,w=Math.min,S=[].push,T=a(/./.exec),A=a(S),O=a("".slice);s("split",(function(t,e,r){var a;return a="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,r){var a=g(h(this)),s=void 0===r?4294967295:r>>>0;if(0===s)return[];if(void 0===t)return[a];if(!o(t))return n(e,a,t,s);for(var u,c,l,f=[],p=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),v=0,m=new RegExp(t.source,p+"g");(u=n(y,m,a))&&!((c=m.lastIndex)>v&&(A(f,O(a,v,u.index)),u.length>1&&u.index<a.length&&i(S,f,d(u,1)),l=u[0].length,v=c,f.length>=s));)m.lastIndex===u.index&&m.lastIndex++;return v===a.length?!l&&T(m,"")||A(f,""):A(f,O(a,v)),f.length>s?d(f,0,s):f}:"0".split(void 0,0).length?function(t,r){return void 0===t&&0===r?[]:n(e,this,t,r)}:e,[function(e,r){var i=h(this),s=null==e?void 0:p(e,t);return s?n(s,e,i,r):n(a,g(i),e,r)},function(t,i){var n=u(this),s=g(t),o=r(a,n,s,i,a!==e);if(o.done)return o.value;var h=c(n,RegExp),p=n.unicode,d=(n.ignoreCase?"i":"")+(n.multiline?"m":"")+(n.unicode?"u":"")+(b?"g":"y"),y=new h(b?"^(?:"+n.source+")":n,d),m=void 0===i?4294967295:i>>>0;if(0===m)return[];if(0===s.length)return null===v(y,s)?[s]:[];for(var x=0,S=0,T=[];S<s.length;){y.lastIndex=b?0:S;var P,E=v(y,b?O(s,S):s);if(null===E||(P=w(f(y.lastIndex+(b?S:0)),s.length))===x)S=l(s,S,p);else{if(A(T,O(s,x,S)),T.length===m)return T;for(var C=1;C<=E.length-1;C++)if(A(T,E[C]),T.length===m)return T;S=x=P}}return A(T,O(s,x)),T}]}),!!x((function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var r="ab".split(t);return 2!==r.length||"a"!==r[0]||"b"!==r[1]})),b)},function(t,e,r){for(var i=r(272),n="undefined"==typeof window?global:window,a=["moz","webkit"],s="AnimationFrame",o=n["request"+s],u=n["cancel"+s]||n["cancelRequest"+s],h=0;!o&&h<a.length;h++)o=n[a[h]+"Request"+s],u=n[a[h]+"Cancel"+s]||n[a[h]+"CancelRequest"+s];if(!o||!u){var c=0,l=0,f=[];o=function(t){if(0===f.length){var e=i(),r=Math.max(0,1e3/60-(e-c));c=r+e,setTimeout((function(){var t=f.slice(0);f.length=0;for(var e=0;e<t.length;e++)if(!t[e].cancelled)try{t[e].callback(c)}catch(t){setTimeout((function(){throw t}),0)}}),Math.round(r))}return f.push({handle:++l,callback:t,cancelled:!1}),l},u=function(t){for(var e=0;e<f.length;e++)f[e].handle===t&&(f[e].cancelled=!0)}}t.exports=function(t){return o.call(n,t)},t.exports.cancel=function(){u.apply(n,arguments)},t.exports.polyfill=function(t){t||(t=n),t.requestAnimationFrame=o,t.cancelAnimationFrame=u}},function(t,e){(function(){var e,r,i,n,a,s;"undefined"!=typeof performance&&null!==performance&&performance.now?t.exports=function(){return performance.now()}:"undefined"!=typeof process&&null!==process&&process.hrtime?(t.exports=function(){return(e()-a)/1e6},r=process.hrtime,n=(e=function(){var t;return 1e9*(t=r())[0]+t[1]})(),s=1e9*process.uptime(),a=n-s):Date.now?(t.exports=function(){return Date.now()-i},i=Date.now()):(t.exports=function(){return(new Date).getTime()-i},i=(new Date).getTime())}).call(this)},function(t,e,r){"use strict";var i=r(144),n=r(274).trim;i({target:"String",proto:!0,forced:r(275)("trim")},{trim:function(){return n(this)}})},function(t,e,r){var i=r(138),n=r(145),a=r(147),s=r(217),o=i("".replace),u="["+s+"]",h=RegExp("^"+u+u+"*"),c=RegExp(u+u+"*$"),l=function(t){return function(e){var r=a(n(e));return 1&t&&(r=o(r,h,"")),2&t&&(r=o(r,c,"")),r}};t.exports={start:l(1),end:l(2),trim:l(3)}},function(t,e,r){var i=r(169).PROPER,n=r(140),a=r(217);t.exports=function(t){return n((function(){return!!a[t]()||"âÂá "!=="âÂá "[t]()||i&&a[t].name!==t}))}},function(t,e){t.exports=function(t){this.ok=!1,this.alpha=1,"#"==t.charAt(0)&&(t=t.substr(1,6)),t=(t=t.replace(/ /g,"")).toLowerCase();var e={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"00ffff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000000",blanchedalmond:"ffebcd",blue:"0000ff",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"00ffff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dodgerblue:"1e90ff",feldspar:"d19275",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"ff00ff",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgrey:"d3d3d3",lightgreen:"90ee90",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslateblue:"8470ff",lightslategray:"778899",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"00ff00",limegreen:"32cd32",linen:"faf0e6",magenta:"ff00ff",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370d8",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"d87093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"663399",red:"ff0000",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",violetred:"d02090",wheat:"f5deb3",white:"ffffff",whitesmoke:"f5f5f5",yellow:"ffff00",yellowgreen:"9acd32"};t=e[t]||t;for(var r=[{re:/^rgba\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3}),\s*((?:\d?\.)?\d)\)$/,example:["rgba(123, 234, 45, 0.8)","rgba(255,234,245,1.0)"],process:function(t){return[parseInt(t[1]),parseInt(t[2]),parseInt(t[3]),parseFloat(t[4])]}},{re:/^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,example:["rgb(123, 234, 45)","rgb(255,234,245)"],process:function(t){return[parseInt(t[1]),parseInt(t[2]),parseInt(t[3])]}},{re:/^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,example:["#00ff00","336699"],process:function(t){return[parseInt(t[1],16),parseInt(t[2],16),parseInt(t[3],16)]}},{re:/^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,example:["#fb0","f0f"],process:function(t){return[parseInt(t[1]+t[1],16),parseInt(t[2]+t[2],16),parseInt(t[3]+t[3],16)]}}],i=0;i<r.length;i++){var n=r[i].re,a=r[i].process,s=n.exec(t);if(s){var o=a(s);this.r=o[0],this.g=o[1],this.b=o[2],o.length>3&&(this.alpha=o[3]),this.ok=!0}}this.r=this.r<0||isNaN(this.r)?0:this.r>255?255:this.r,this.g=this.g<0||isNaN(this.g)?0:this.g>255?255:this.g,this.b=this.b<0||isNaN(this.b)?0:this.b>255?255:this.b,this.alpha=this.alpha<0?0:this.alpha>1||isNaN(this.alpha)?1:this.alpha,this.toRGB=function(){return"rgb("+this.r+", "+this.g+", "+this.b+")"},this.toRGBA=function(){return"rgba("+this.r+", "+this.g+", "+this.b+", "+this.alpha+")"},this.toHex=function(){var t=this.r.toString(16),e=this.g.toString(16),r=this.b.toString(16);return 1==t.length&&(t="0"+t),1==e.length&&(e="0"+e),1==r.length&&(r="0"+r),"#"+t+e+r},this.getHelpXML=function(){for(var t=new Array,i=0;i<r.length;i++)for(var n=r[i].example,a=0;a<n.length;a++)t[t.length]=n[a];for(var s in e)t[t.length]=s;var o=document.createElement("ul");o.setAttribute("id","rgbcolor-examples");for(i=0;i<t.length;i++)try{var u=document.createElement("li"),h=new RGBColor(t[i]),c=document.createElement("div");c.style.cssText="margin: 3px; border: 1px solid black; background:"+h.toHex()+"; color:"+h.toHex(),c.appendChild(document.createTextNode("test"));var l=document.createTextNode(" "+t[i]+" -> "+h.toRGB()+" -> "+h.toHex());u.appendChild(c),u.appendChild(l),o.appendChild(u)}catch(t){}return o}}},function(t,e,r){"use strict";var i=r(144),n=r(138),a=r(190),s=r(145),o=r(147),u=r(191),h=n("".indexOf);i({target:"String",proto:!0,forced:!u("includes")},{includes:function(t){return!!~h(o(s(this)),o(a(t)),arguments.length>1?arguments[1]:void 0)}})},function(t,e,r){"use strict";var i=r(144),n=r(138),a=r(200).indexOf,s=r(216),o=n([].indexOf),u=!!o&&1/o([1],1,-0)<0,h=s("indexOf");i({target:"Array",proto:!0,forced:u||!h},{indexOf:function(t){var e=arguments.length>1?arguments[1]:void 0;return u?o(this,t,e)||0:a(this,t,e)}})},function(t,e,r){"use strict";var i=r(144),n=r(138),a=r(280),s=n([].reverse),o=[1,2];i({target:"Array",proto:!0,forced:String(o)===String(o.reverse())},{reverse:function(){return a(this)&&(this.length=this.length),s(this)}})},function(t,e,r){var i=r(152);t.exports=Array.isArray||function(t){return"Array"==i(t)}},function(t,e,r){"use strict";var i=r(138),n=r(169).PROPER,a=r(151),s=r(142),o=r(162),u=r(147),h=r(140),c=r(210),l=RegExp.prototype,f=l.toString,g=i(c),p=h((function(){return"/a/b"!=f.call({source:"a",flags:"b"})})),d=n&&"toString"!=f.name;(p||d)&&a(RegExp.prototype,"toString",(function(){var t=s(this),e=u(t.source),r=t.flags;return"/"+e+"/"+u(void 0===r&&o(l,t)&&!("flags"in l)?g(t):r)}),{unsafe:!0})},,function(t,e,r){"use strict";r.r(e),r.d(e,"AElement",(function(){return fe})),r.d(e,"AnimateColorElement",(function(){return se})),r.d(e,"AnimateElement",(function(){return ae})),r.d(e,"AnimateTransformElement",(function(){return oe})),r.d(e,"BoundingBox",(function(){return Lt})),r.d(e,"CB1",(function(){return at})),r.d(e,"CB2",(function(){return st})),r.d(e,"CB3",(function(){return ot})),r.d(e,"CB4",(function(){return ut})),r.d(e,"Canvg",(function(){return He})),r.d(e,"CircleElement",(function(){return qt})),r.d(e,"ClipPathElement",(function(){return Me})),r.d(e,"DefsElement",(function(){return Jt})),r.d(e,"DescElement",(function(){return Le})),r.d(e,"Document",(function(){return ze})),r.d(e,"Element",(function(){return Nt})),r.d(e,"EllipseElement",(function(){return Wt})),r.d(e,"FeColorMatrixElement",(function(){return Pe})),r.d(e,"FeCompositeElement",(function(){return Re})),r.d(e,"FeDropShadowElement",(function(){return _e})),r.d(e,"FeGaussianBlurElement",(function(){return ke})),r.d(e,"FeMorphologyElement",(function(){return Ve})),r.d(e,"FilterElement",(function(){return Ne})),r.d(e,"Font",(function(){return It})),r.d(e,"FontElement",(function(){return ue})),r.d(e,"FontFaceElement",(function(){return he})),r.d(e,"GElement",(function(){return te})),r.d(e,"GlyphElement",(function(){return zt})),r.d(e,"GradientElement",(function(){return ee})),r.d(e,"ImageElement",(function(){return ye})),r.d(e,"LineElement",(function(){return Gt})),r.d(e,"LinearGradientElement",(function(){return re})),r.d(e,"MarkerElement",(function(){return Kt})),r.d(e,"MaskElement",(function(){return Ee})),r.d(e,"Matrix",(function(){return Ot})),r.d(e,"MissingGlyphElement",(function(){return ce})),r.d(e,"Mouse",(function(){return dt})),r.d(e,"PSEUDO_ZERO",(function(){return et})),r.d(e,"Parser",(function(){return wt})),r.d(e,"PathElement",(function(){return jt})),r.d(e,"PathParser",(function(){return Dt})),r.d(e,"PatternElement",(function(){return Zt})),r.d(e,"Point",(function(){return pt})),r.d(e,"PolygonElement",(function(){return $t})),r.d(e,"PolylineElement",(function(){return Qt})),r.d(e,"Property",(function(){return ft})),r.d(e,"QB1",(function(){return ht})),r.d(e,"QB2",(function(){return ct})),r.d(e,"QB3",(function(){return lt})),r.d(e,"RadialGradientElement",(function(){return ie})),r.d(e,"RectElement",(function(){return Yt})),r.d(e,"RenderedElement",(function(){return Bt})),r.d(e,"Rotate",(function(){return Tt})),r.d(e,"SVGElement",(function(){return Xt})),r.d(e,"SVGFontLoader",(function(){return xe})),r.d(e,"Scale",(function(){return At})),r.d(e,"Screen",(function(){return mt})),r.d(e,"Skew",(function(){return Pt})),r.d(e,"SkewX",(function(){return Et})),r.d(e,"SkewY",(function(){return Ct})),r.d(e,"StopElement",(function(){return ne})),r.d(e,"StyleElement",(function(){return be})),r.d(e,"SymbolElement",(function(){return me})),r.d(e,"TRefElement",(function(){return le})),r.d(e,"TSpanElement",(function(){return Ut})),r.d(e,"TextElement",(function(){return Ft})),r.d(e,"TextPathElement",(function(){return de})),r.d(e,"TitleElement",(function(){return Ie})),r.d(e,"Transform",(function(){return Mt})),r.d(e,"Translate",(function(){return St})),r.d(e,"UnknownElement",(function(){return _t})),r.d(e,"UseElement",(function(){return we})),r.d(e,"ViewPort",(function(){return gt})),r.d(e,"compressSpaces",(function(){return B})),r.d(e,"getSelectorSpecificity",(function(){return tt})),r.d(e,"normalizeAttributeName",(function(){return H})),r.d(e,"normalizeColor",(function(){return Y})),r.d(e,"parseExternalUrl",(function(){return X})),r.d(e,"presets",(function(){return D})),r.d(e,"toNumbers",(function(){return F})),r.d(e,"trimLeft",(function(){return j})),r.d(e,"trimRight",(function(){return z})),r.d(e,"vectorMagnitude",(function(){return rt})),r.d(e,"vectorsAngle",(function(){return nt})),r.d(e,"vectorsRatio",(function(){return it}));r(218);var i=r(248),n=r.n(i),a=(r(249),r(256),r(258),r(213),r(263),r(266)),s=r.n(a),o=(r(267),r(269),r(270),r(271)),u=r.n(o),h=(r(273),r(276)),c=r.n(h),l=(r(277),r(278),r(279),function(t,e){return(l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)});function f(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}l(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}function g(t,e){var r=t[0],i=t[1];return[r*Math.cos(e)-i*Math.sin(e),r*Math.sin(e)+i*Math.cos(e)]}function p(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var r=0;r<t.length;r++)if("number"!=typeof t[r])throw new Error("assertNumbers arguments["+r+"] is not a number. "+typeof t[r]+" == typeof "+t[r]);return!0}var d=Math.PI;function v(t,e,r){t.lArcFlag=0===t.lArcFlag?0:1,t.sweepFlag=0===t.sweepFlag?0:1;var i=t.rX,n=t.rY,a=t.x,s=t.y;i=Math.abs(t.rX),n=Math.abs(t.rY);var o=g([(e-a)/2,(r-s)/2],-t.xRot/180*d),u=o[0],h=o[1],c=Math.pow(u,2)/Math.pow(i,2)+Math.pow(h,2)/Math.pow(n,2);1<c&&(i*=Math.sqrt(c),n*=Math.sqrt(c)),t.rX=i,t.rY=n;var l=Math.pow(i,2)*Math.pow(h,2)+Math.pow(n,2)*Math.pow(u,2),f=(t.lArcFlag!==t.sweepFlag?1:-1)*Math.sqrt(Math.max(0,(Math.pow(i,2)*Math.pow(n,2)-l)/l)),p=i*h/n*f,v=-n*u/i*f,y=g([p,v],t.xRot/180*d);t.cX=y[0]+(e+a)/2,t.cY=y[1]+(r+s)/2,t.phi1=Math.atan2((h-v)/n,(u-p)/i),t.phi2=Math.atan2((-h-v)/n,(-u-p)/i),0===t.sweepFlag&&t.phi2>t.phi1&&(t.phi2-=2*d),1===t.sweepFlag&&t.phi2<t.phi1&&(t.phi2+=2*d),t.phi1*=180/d,t.phi2*=180/d}function y(t,e,r){p(t,e,r);var i=t*t+e*e-r*r;if(0>i)return[];if(0===i)return[[t*r/(t*t+e*e),e*r/(t*t+e*e)]];var n=Math.sqrt(i);return[[(t*r+e*n)/(t*t+e*e),(e*r-t*n)/(t*t+e*e)],[(t*r-e*n)/(t*t+e*e),(e*r+t*n)/(t*t+e*e)]]}var m,x=Math.PI/180;function b(t,e,r){return(1-r)*t+r*e}function w(t,e,r,i){return t+Math.cos(i/180*d)*e+Math.sin(i/180*d)*r}function S(t,e,r,i){var n=1e-6,a=e-t,s=r-e,o=3*a+3*(i-r)-6*s,u=6*(s-a),h=3*a;return Math.abs(o)<n?[-h/u]:function(t,e,r){void 0===r&&(r=1e-6);var i=t*t/4-e;if(i<-r)return[];if(i<=r)return[-t/2];var n=Math.sqrt(i);return[-t/2-n,-t/2+n]}(u/o,h/o,n)}function T(t,e,r,i,n){var a=1-n;return t*(a*a*a)+e*(3*a*a*n)+r*(3*a*n*n)+i*(n*n*n)}!function(t){function e(){return n((function(t,e,r){return t.relative&&(void 0!==t.x1&&(t.x1+=e),void 0!==t.y1&&(t.y1+=r),void 0!==t.x2&&(t.x2+=e),void 0!==t.y2&&(t.y2+=r),void 0!==t.x&&(t.x+=e),void 0!==t.y&&(t.y+=r),t.relative=!1),t}))}function r(){var t=NaN,e=NaN,r=NaN,i=NaN;return n((function(n,a,s){return n.type&M.SMOOTH_CURVE_TO&&(n.type=M.CURVE_TO,t=isNaN(t)?a:t,e=isNaN(e)?s:e,n.x1=n.relative?a-t:2*a-t,n.y1=n.relative?s-e:2*s-e),n.type&M.CURVE_TO?(t=n.relative?a+n.x2:n.x2,e=n.relative?s+n.y2:n.y2):(t=NaN,e=NaN),n.type&M.SMOOTH_QUAD_TO&&(n.type=M.QUAD_TO,r=isNaN(r)?a:r,i=isNaN(i)?s:i,n.x1=n.relative?a-r:2*a-r,n.y1=n.relative?s-i:2*s-i),n.type&M.QUAD_TO?(r=n.relative?a+n.x1:n.x1,i=n.relative?s+n.y1:n.y1):(r=NaN,i=NaN),n}))}function i(){var t=NaN,e=NaN;return n((function(r,i,n){if(r.type&M.SMOOTH_QUAD_TO&&(r.type=M.QUAD_TO,t=isNaN(t)?i:t,e=isNaN(e)?n:e,r.x1=r.relative?i-t:2*i-t,r.y1=r.relative?n-e:2*n-e),r.type&M.QUAD_TO){t=r.relative?i+r.x1:r.x1,e=r.relative?n+r.y1:r.y1;var a=r.x1,s=r.y1;r.type=M.CURVE_TO,r.x1=((r.relative?0:i)+2*a)/3,r.y1=((r.relative?0:n)+2*s)/3,r.x2=(r.x+2*a)/3,r.y2=(r.y+2*s)/3}else t=NaN,e=NaN;return r}))}function n(t){var e=0,r=0,i=NaN,n=NaN;return function(a){if(isNaN(i)&&!(a.type&M.MOVE_TO))throw new Error("path must start with moveto");var s=t(a,e,r,i,n);return a.type&M.CLOSE_PATH&&(e=i,r=n),void 0!==a.x&&(e=a.relative?e+a.x:a.x),void 0!==a.y&&(r=a.relative?r+a.y:a.y),a.type&M.MOVE_TO&&(i=e,n=r),s}}function a(t,e,r,i,a,s){return p(t,e,r,i,a,s),n((function(n,o,u,h){var c=n.x1,l=n.x2,f=n.relative&&!isNaN(h),g=void 0!==n.x?n.x:f?0:o,p=void 0!==n.y?n.y:f?0:u;function d(t){return t*t}n.type&M.HORIZ_LINE_TO&&0!==e&&(n.type=M.LINE_TO,n.y=n.relative?0:u),n.type&M.VERT_LINE_TO&&0!==r&&(n.type=M.LINE_TO,n.x=n.relative?0:o),void 0!==n.x&&(n.x=n.x*t+p*r+(f?0:a)),void 0!==n.y&&(n.y=g*e+n.y*i+(f?0:s)),void 0!==n.x1&&(n.x1=n.x1*t+n.y1*r+(f?0:a)),void 0!==n.y1&&(n.y1=c*e+n.y1*i+(f?0:s)),void 0!==n.x2&&(n.x2=n.x2*t+n.y2*r+(f?0:a)),void 0!==n.y2&&(n.y2=l*e+n.y2*i+(f?0:s));var v=t*i-e*r;if(void 0!==n.xRot&&(1!==t||0!==e||0!==r||1!==i))if(0===v)delete n.rX,delete n.rY,delete n.xRot,delete n.lArcFlag,delete n.sweepFlag,n.type=M.LINE_TO;else{var y=n.xRot*Math.PI/180,m=Math.sin(y),x=Math.cos(y),b=1/d(n.rX),w=1/d(n.rY),S=d(x)*b+d(m)*w,T=2*m*x*(b-w),A=d(m)*b+d(x)*w,O=S*i*i-T*e*i+A*e*e,P=T*(t*i+e*r)-2*(S*r*i+A*t*e),E=S*r*r-T*t*r+A*t*t,C=(Math.atan2(P,O-E)+Math.PI)%Math.PI/2,N=Math.sin(C),_=Math.cos(C);n.rX=Math.abs(v)/Math.sqrt(O*d(_)+P*N*_+E*d(N)),n.rY=Math.abs(v)/Math.sqrt(O*d(N)-P*N*_+E*d(_)),n.xRot=180*C/Math.PI}return void 0!==n.sweepFlag&&0>v&&(n.sweepFlag=+!n.sweepFlag),n}))}t.ROUND=function(t){function e(e){return Math.round(e*t)/t}return void 0===t&&(t=1e13),p(t),function(t){return void 0!==t.x1&&(t.x1=e(t.x1)),void 0!==t.y1&&(t.y1=e(t.y1)),void 0!==t.x2&&(t.x2=e(t.x2)),void 0!==t.y2&&(t.y2=e(t.y2)),void 0!==t.x&&(t.x=e(t.x)),void 0!==t.y&&(t.y=e(t.y)),void 0!==t.rX&&(t.rX=e(t.rX)),void 0!==t.rY&&(t.rY=e(t.rY)),t}},t.TO_ABS=e,t.TO_REL=function(){return n((function(t,e,r){return t.relative||(void 0!==t.x1&&(t.x1-=e),void 0!==t.y1&&(t.y1-=r),void 0!==t.x2&&(t.x2-=e),void 0!==t.y2&&(t.y2-=r),void 0!==t.x&&(t.x-=e),void 0!==t.y&&(t.y-=r),t.relative=!0),t}))},t.NORMALIZE_HVZ=function(t,e,r){return void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===r&&(r=!0),n((function(i,n,a,s,o){if(isNaN(s)&&!(i.type&M.MOVE_TO))throw new Error("path must start with moveto");return e&&i.type&M.HORIZ_LINE_TO&&(i.type=M.LINE_TO,i.y=i.relative?0:a),r&&i.type&M.VERT_LINE_TO&&(i.type=M.LINE_TO,i.x=i.relative?0:n),t&&i.type&M.CLOSE_PATH&&(i.type=M.LINE_TO,i.x=i.relative?s-n:s,i.y=i.relative?o-a:o),i.type&M.ARC&&(0===i.rX||0===i.rY)&&(i.type=M.LINE_TO,delete i.rX,delete i.rY,delete i.xRot,delete i.lArcFlag,delete i.sweepFlag),i}))},t.NORMALIZE_ST=r,t.QT_TO_C=i,t.INFO=n,t.SANITIZE=function(t){void 0===t&&(t=0),p(t);var e=NaN,r=NaN,i=NaN,a=NaN;return n((function(n,s,o,u,h){var c=Math.abs,l=!1,f=0,g=0;if(n.type&M.SMOOTH_CURVE_TO&&(f=isNaN(e)?0:s-e,g=isNaN(r)?0:o-r),n.type&(M.CURVE_TO|M.SMOOTH_CURVE_TO)?(e=n.relative?s+n.x2:n.x2,r=n.relative?o+n.y2:n.y2):(e=NaN,r=NaN),n.type&M.SMOOTH_QUAD_TO?(i=isNaN(i)?s:2*s-i,a=isNaN(a)?o:2*o-a):n.type&M.QUAD_TO?(i=n.relative?s+n.x1:n.x1,a=n.relative?o+n.y1:n.y2):(i=NaN,a=NaN),n.type&M.LINE_COMMANDS||n.type&M.ARC&&(0===n.rX||0===n.rY||!n.lArcFlag)||n.type&M.CURVE_TO||n.type&M.SMOOTH_CURVE_TO||n.type&M.QUAD_TO||n.type&M.SMOOTH_QUAD_TO){var p=void 0===n.x?0:n.relative?n.x:n.x-s,d=void 0===n.y?0:n.relative?n.y:n.y-o;f=isNaN(i)?void 0===n.x1?f:n.relative?n.x:n.x1-s:i-s,g=isNaN(a)?void 0===n.y1?g:n.relative?n.y:n.y1-o:a-o;var v=void 0===n.x2?0:n.relative?n.x:n.x2-s,y=void 0===n.y2?0:n.relative?n.y:n.y2-o;c(p)<=t&&c(d)<=t&&c(f)<=t&&c(g)<=t&&c(v)<=t&&c(y)<=t&&(l=!0)}return n.type&M.CLOSE_PATH&&c(s-u)<=t&&c(o-h)<=t&&(l=!0),l?[]:n}))},t.MATRIX=a,t.ROTATE=function(t,e,r){void 0===e&&(e=0),void 0===r&&(r=0),p(t,e,r);var i=Math.sin(t),n=Math.cos(t);return a(n,i,-i,n,e-e*n+r*i,r-e*i-r*n)},t.TRANSLATE=function(t,e){return void 0===e&&(e=0),p(t,e),a(1,0,0,1,t,e)},t.SCALE=function(t,e){return void 0===e&&(e=t),p(t,e),a(t,0,0,e,0,0)},t.SKEW_X=function(t){return p(t),a(1,0,Math.atan(t),1,0,0)},t.SKEW_Y=function(t){return p(t),a(1,Math.atan(t),0,1,0,0)},t.X_AXIS_SYMMETRY=function(t){return void 0===t&&(t=0),p(t),a(-1,0,0,1,t,0)},t.Y_AXIS_SYMMETRY=function(t){return void 0===t&&(t=0),p(t),a(1,0,0,-1,0,t)},t.A_TO_C=function(){return n((function(t,e,r){return M.ARC===t.type?function(t,e,r){var i,n,a,s;t.cX||v(t,e,r);for(var o=Math.min(t.phi1,t.phi2),u=Math.max(t.phi1,t.phi2)-o,h=Math.ceil(u/90),c=new Array(h),l=e,f=r,p=0;p<h;p++){var d=b(t.phi1,t.phi2,p/h),y=b(t.phi1,t.phi2,(p+1)/h),m=y-d,w=4/3*Math.tan(m*x/4),S=[Math.cos(d*x)-w*Math.sin(d*x),Math.sin(d*x)+w*Math.cos(d*x)],T=S[0],A=S[1],O=[Math.cos(y*x),Math.sin(y*x)],P=O[0],E=O[1],C=[P+w*Math.sin(y*x),E-w*Math.cos(y*x)],N=C[0],_=C[1];c[p]={relative:t.relative,type:M.CURVE_TO};var V=function(e,r){var i=g([e*t.rX,r*t.rY],t.xRot),n=i[0],a=i[1];return[t.cX+n,t.cY+a]};i=V(T,A),c[p].x1=i[0],c[p].y1=i[1],n=V(N,_),c[p].x2=n[0],c[p].y2=n[1],a=V(P,E),c[p].x=a[0],c[p].y=a[1],t.relative&&(c[p].x1-=l,c[p].y1-=f,c[p].x2-=l,c[p].y2-=f,c[p].x-=l,c[p].y-=f),l=(s=[c[p].x,c[p].y])[0],f=s[1]}return c}(t,t.relative?0:e,t.relative?0:r):t}))},t.ANNOTATE_ARCS=function(){return n((function(t,e,r){return t.relative&&(e=0,r=0),M.ARC===t.type&&v(t,e,r),t}))},t.CLONE=function(){return function(t){var e={};for(var r in t)e[r]=t[r];return e}},t.CALCULATE_BOUNDS=function(){var t=e(),a=i(),s=r(),o=n((function(e,r,i){var n=s(a(t(function(t){var e={};for(var r in t)e[r]=t[r];return e}(e))));function u(t){t>o.maxX&&(o.maxX=t),t<o.minX&&(o.minX=t)}function h(t){t>o.maxY&&(o.maxY=t),t<o.minY&&(o.minY=t)}if(n.type&M.DRAWING_COMMANDS&&(u(r),h(i)),n.type&M.HORIZ_LINE_TO&&u(n.x),n.type&M.VERT_LINE_TO&&h(n.y),n.type&M.LINE_TO&&(u(n.x),h(n.y)),n.type&M.CURVE_TO){u(n.x),h(n.y);for(var c=0,l=S(r,n.x1,n.x2,n.x);c<l.length;c++)0<(R=l[c])&&1>R&&u(T(r,n.x1,n.x2,n.x,R));for(var f=0,g=S(i,n.y1,n.y2,n.y);f<g.length;f++)0<(R=g[f])&&1>R&&h(T(i,n.y1,n.y2,n.y,R))}if(n.type&M.ARC){u(n.x),h(n.y),v(n,r,i);for(var p=n.xRot/180*Math.PI,d=Math.cos(p)*n.rX,m=Math.sin(p)*n.rX,x=-Math.sin(p)*n.rY,b=Math.cos(p)*n.rY,A=n.phi1<n.phi2?[n.phi1,n.phi2]:-180>n.phi2?[n.phi2+360,n.phi1+360]:[n.phi2,n.phi1],O=A[0],P=A[1],E=function(t){var e=t[0],r=t[1],i=180*Math.atan2(r,e)/Math.PI;return i<O?i+360:i},C=0,N=y(x,-d,0).map(E);C<N.length;C++)(R=N[C])>O&&R<P&&u(w(n.cX,d,x,R));for(var _=0,V=y(b,-m,0).map(E);_<V.length;_++){var R;(R=V[_])>O&&R<P&&h(w(n.cY,m,b,R))}}return e}));return o.minX=1/0,o.maxX=-1/0,o.minY=1/0,o.maxY=-1/0,o}}(m||(m={}));var A,O=function(){function t(){}return t.prototype.round=function(t){return this.transform(m.ROUND(t))},t.prototype.toAbs=function(){return this.transform(m.TO_ABS())},t.prototype.toRel=function(){return this.transform(m.TO_REL())},t.prototype.normalizeHVZ=function(t,e,r){return this.transform(m.NORMALIZE_HVZ(t,e,r))},t.prototype.normalizeST=function(){return this.transform(m.NORMALIZE_ST())},t.prototype.qtToC=function(){return this.transform(m.QT_TO_C())},t.prototype.aToC=function(){return this.transform(m.A_TO_C())},t.prototype.sanitize=function(t){return this.transform(m.SANITIZE(t))},t.prototype.translate=function(t,e){return this.transform(m.TRANSLATE(t,e))},t.prototype.scale=function(t,e){return this.transform(m.SCALE(t,e))},t.prototype.rotate=function(t,e,r){return this.transform(m.ROTATE(t,e,r))},t.prototype.matrix=function(t,e,r,i,n,a){return this.transform(m.MATRIX(t,e,r,i,n,a))},t.prototype.skewX=function(t){return this.transform(m.SKEW_X(t))},t.prototype.skewY=function(t){return this.transform(m.SKEW_Y(t))},t.prototype.xSymmetry=function(t){return this.transform(m.X_AXIS_SYMMETRY(t))},t.prototype.ySymmetry=function(t){return this.transform(m.Y_AXIS_SYMMETRY(t))},t.prototype.annotateArcs=function(){return this.transform(m.ANNOTATE_ARCS())},t}(),P=function(t){return" "===t||"\t"===t||"\r"===t||"\n"===t},E=function(t){return"0".charCodeAt(0)<=t.charCodeAt(0)&&t.charCodeAt(0)<="9".charCodeAt(0)},C=function(t){function e(){var e=t.call(this)||this;return e.curNumber="",e.curCommandType=-1,e.curCommandRelative=!1,e.canParseCommandOrComma=!0,e.curNumberHasExp=!1,e.curNumberHasExpDigits=!1,e.curNumberHasDecimal=!1,e.curArgs=[],e}return f(e,t),e.prototype.finish=function(t){if(void 0===t&&(t=[]),this.parse(" ",t),0!==this.curArgs.length||!this.canParseCommandOrComma)throw new SyntaxError("Unterminated command at the path end.");return t},e.prototype.parse=function(t,e){var r=this;void 0===e&&(e=[]);for(var i=function(t){e.push(t),r.curArgs.length=0,r.canParseCommandOrComma=!0},n=0;n<t.length;n++){var a=t[n],s=!(this.curCommandType!==M.ARC||3!==this.curArgs.length&&4!==this.curArgs.length||1!==this.curNumber.length||"0"!==this.curNumber&&"1"!==this.curNumber),o=E(a)&&("0"===this.curNumber&&"0"===a||s);if(!E(a)||o)if("e"!==a&&"E"!==a)if("-"!==a&&"+"!==a||!this.curNumberHasExp||this.curNumberHasExpDigits)if("."!==a||this.curNumberHasExp||this.curNumberHasDecimal||s){if(this.curNumber&&-1!==this.curCommandType){var u=Number(this.curNumber);if(isNaN(u))throw new SyntaxError("Invalid number ending at "+n);if(this.curCommandType===M.ARC)if(0===this.curArgs.length||1===this.curArgs.length){if(0>u)throw new SyntaxError('Expected positive number, got "'+u+'" at index "'+n+'"')}else if((3===this.curArgs.length||4===this.curArgs.length)&&"0"!==this.curNumber&&"1"!==this.curNumber)throw new SyntaxError('Expected a flag, got "'+this.curNumber+'" at index "'+n+'"');this.curArgs.push(u),this.curArgs.length===N[this.curCommandType]&&(M.HORIZ_LINE_TO===this.curCommandType?i({type:M.HORIZ_LINE_TO,relative:this.curCommandRelative,x:u}):M.VERT_LINE_TO===this.curCommandType?i({type:M.VERT_LINE_TO,relative:this.curCommandRelative,y:u}):this.curCommandType===M.MOVE_TO||this.curCommandType===M.LINE_TO||this.curCommandType===M.SMOOTH_QUAD_TO?(i({type:this.curCommandType,relative:this.curCommandRelative,x:this.curArgs[0],y:this.curArgs[1]}),M.MOVE_TO===this.curCommandType&&(this.curCommandType=M.LINE_TO)):this.curCommandType===M.CURVE_TO?i({type:M.CURVE_TO,relative:this.curCommandRelative,x1:this.curArgs[0],y1:this.curArgs[1],x2:this.curArgs[2],y2:this.curArgs[3],x:this.curArgs[4],y:this.curArgs[5]}):this.curCommandType===M.SMOOTH_CURVE_TO?i({type:M.SMOOTH_CURVE_TO,relative:this.curCommandRelative,x2:this.curArgs[0],y2:this.curArgs[1],x:this.curArgs[2],y:this.curArgs[3]}):this.curCommandType===M.QUAD_TO?i({type:M.QUAD_TO,relative:this.curCommandRelative,x1:this.curArgs[0],y1:this.curArgs[1],x:this.curArgs[2],y:this.curArgs[3]}):this.curCommandType===M.ARC&&i({type:M.ARC,relative:this.curCommandRelative,rX:this.curArgs[0],rY:this.curArgs[1],xRot:this.curArgs[2],lArcFlag:this.curArgs[3],sweepFlag:this.curArgs[4],x:this.curArgs[5],y:this.curArgs[6]})),this.curNumber="",this.curNumberHasExpDigits=!1,this.curNumberHasExp=!1,this.curNumberHasDecimal=!1,this.canParseCommandOrComma=!0}if(!P(a))if(","===a&&this.canParseCommandOrComma)this.canParseCommandOrComma=!1;else if("+"!==a&&"-"!==a&&"."!==a)if(o)this.curNumber=a,this.curNumberHasDecimal=!1;else{if(0!==this.curArgs.length)throw new SyntaxError("Unterminated command at index "+n+".");if(!this.canParseCommandOrComma)throw new SyntaxError('Unexpected character "'+a+'" at index '+n+". Command cannot follow comma");if(this.canParseCommandOrComma=!1,"z"!==a&&"Z"!==a)if("h"===a||"H"===a)this.curCommandType=M.HORIZ_LINE_TO,this.curCommandRelative="h"===a;else if("v"===a||"V"===a)this.curCommandType=M.VERT_LINE_TO,this.curCommandRelative="v"===a;else if("m"===a||"M"===a)this.curCommandType=M.MOVE_TO,this.curCommandRelative="m"===a;else if("l"===a||"L"===a)this.curCommandType=M.LINE_TO,this.curCommandRelative="l"===a;else if("c"===a||"C"===a)this.curCommandType=M.CURVE_TO,this.curCommandRelative="c"===a;else if("s"===a||"S"===a)this.curCommandType=M.SMOOTH_CURVE_TO,this.curCommandRelative="s"===a;else if("q"===a||"Q"===a)this.curCommandType=M.QUAD_TO,this.curCommandRelative="q"===a;else if("t"===a||"T"===a)this.curCommandType=M.SMOOTH_QUAD_TO,this.curCommandRelative="t"===a;else{if("a"!==a&&"A"!==a)throw new SyntaxError('Unexpected character "'+a+'" at index '+n+".");this.curCommandType=M.ARC,this.curCommandRelative="a"===a}else e.push({type:M.CLOSE_PATH}),this.canParseCommandOrComma=!0,this.curCommandType=-1}else this.curNumber=a,this.curNumberHasDecimal="."===a}else this.curNumber+=a,this.curNumberHasDecimal=!0;else this.curNumber+=a;else this.curNumber+=a,this.curNumberHasExp=!0;else this.curNumber+=a,this.curNumberHasExpDigits=this.curNumberHasExp}return e},e.prototype.transform=function(t){return Object.create(this,{parse:{value:function(e,r){void 0===r&&(r=[]);for(var i=0,n=Object.getPrototypeOf(this).parse.call(this,e);i<n.length;i++){var a=n[i],s=t(a);Array.isArray(s)?r.push.apply(r,s):r.push(s)}return r}}})},e}(O),M=function(t){function e(r){var i=t.call(this)||this;return i.commands="string"==typeof r?e.parse(r):r,i}return f(e,t),e.prototype.encode=function(){return e.encode(this.commands)},e.prototype.getBounds=function(){var t=m.CALCULATE_BOUNDS();return this.transform(t),t},e.prototype.transform=function(t){for(var e=[],r=0,i=this.commands;r<i.length;r++){var n=t(i[r]);Array.isArray(n)?e.push.apply(e,n):e.push(n)}return this.commands=e,this},e.encode=function(t){return function(t){var e="";Array.isArray(t)||(t=[t]);for(var r=0;r<t.length;r++){var i=t[r];if(i.type===M.CLOSE_PATH)e+="z";else if(i.type===M.HORIZ_LINE_TO)e+=(i.relative?"h":"H")+i.x;else if(i.type===M.VERT_LINE_TO)e+=(i.relative?"v":"V")+i.y;else if(i.type===M.MOVE_TO)e+=(i.relative?"m":"M")+i.x+" "+i.y;else if(i.type===M.LINE_TO)e+=(i.relative?"l":"L")+i.x+" "+i.y;else if(i.type===M.CURVE_TO)e+=(i.relative?"c":"C")+i.x1+" "+i.y1+" "+i.x2+" "+i.y2+" "+i.x+" "+i.y;else if(i.type===M.SMOOTH_CURVE_TO)e+=(i.relative?"s":"S")+i.x2+" "+i.y2+" "+i.x+" "+i.y;else if(i.type===M.QUAD_TO)e+=(i.relative?"q":"Q")+i.x1+" "+i.y1+" "+i.x+" "+i.y;else if(i.type===M.SMOOTH_QUAD_TO)e+=(i.relative?"t":"T")+i.x+" "+i.y;else{if(i.type!==M.ARC)throw new Error('Unexpected command type "'+i.type+'" at index '+r+".");e+=(i.relative?"a":"A")+i.rX+" "+i.rY+" "+i.xRot+" "+ +i.lArcFlag+" "+ +i.sweepFlag+" "+i.x+" "+i.y}}return e}(t)},e.parse=function(t){var e=new C,r=[];return e.parse(t,r),e.finish(r),r},e.CLOSE_PATH=1,e.MOVE_TO=2,e.HORIZ_LINE_TO=4,e.VERT_LINE_TO=8,e.LINE_TO=16,e.CURVE_TO=32,e.SMOOTH_CURVE_TO=64,e.QUAD_TO=128,e.SMOOTH_QUAD_TO=256,e.ARC=512,e.LINE_COMMANDS=e.LINE_TO|e.HORIZ_LINE_TO|e.VERT_LINE_TO,e.DRAWING_COMMANDS=e.HORIZ_LINE_TO|e.VERT_LINE_TO|e.LINE_TO|e.CURVE_TO|e.SMOOTH_CURVE_TO|e.QUAD_TO|e.SMOOTH_QUAD_TO|e.ARC,e}(O),N=((A={})[M.MOVE_TO]=2,A[M.LINE_TO]=2,A[M.HORIZ_LINE_TO]=1,A[M.VERT_LINE_TO]=1,A[M.CLOSE_PATH]=0,A[M.QUAD_TO]=4,A[M.SMOOTH_QUAD_TO]=2,A[M.CURVE_TO]=6,A[M.SMOOTH_CURVE_TO]=4,A[M.ARC]=7,A);r(281);function _(t){return(_="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var V=[512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,289,287,285,282,280,278,275,273,271,269,267,265,263,261,259],R=[9,11,12,13,13,14,14,15,15,15,15,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24];function k(t,e,r,i,n){if("string"==typeof t&&(t=document.getElementById(t)),!t||"object"!==_(t)||!("getContext"in t))throw new TypeError("Expecting canvas with `getContext` method in processCanvasRGB(A) calls!");var a=t.getContext("2d");try{return a.getImageData(e,r,i,n)}catch(t){throw new Error("unable to access image data: "+t)}}function I(t,e,r,i,n,a){if(!(isNaN(a)||a<1)){a|=0;var s=k(t,e,r,i,n);s=function(t,e,r,i,n,a){for(var s,o=t.data,u=2*a+1,h=i-1,c=n-1,l=a+1,f=l*(l+1)/2,g=new L,p=g,d=1;d<u;d++)p=p.next=new L,d===l&&(s=p);p.next=g;for(var v=null,y=null,m=0,x=0,b=V[a],w=R[a],S=0;S<n;S++){p=g;for(var T=o[x],A=o[x+1],O=o[x+2],P=o[x+3],E=0;E<l;E++)p.r=T,p.g=A,p.b=O,p.a=P,p=p.next;for(var C=0,M=0,N=0,_=0,k=l*T,I=l*A,D=l*O,B=l*P,j=f*T,z=f*A,F=f*O,U=f*P,H=1;H<l;H++){var X=x+((h<H?h:H)<<2),Y=o[X],q=o[X+1],W=o[X+2],G=o[X+3],Q=l-H;j+=(p.r=Y)*Q,z+=(p.g=q)*Q,F+=(p.b=W)*Q,U+=(p.a=G)*Q,C+=Y,M+=q,N+=W,_+=G,p=p.next}v=g,y=s;for(var $=0;$<i;$++){var Z=U*b>>w;if(o[x+3]=Z,0!==Z){var K=255/Z;o[x]=(j*b>>w)*K,o[x+1]=(z*b>>w)*K,o[x+2]=(F*b>>w)*K}else o[x]=o[x+1]=o[x+2]=0;j-=k,z-=I,F-=D,U-=B,k-=v.r,I-=v.g,D-=v.b,B-=v.a;var J=$+a+1;J=m+(J<h?J:h)<<2,C+=v.r=o[J],M+=v.g=o[J+1],N+=v.b=o[J+2],_+=v.a=o[J+3],j+=C,z+=M,F+=N,U+=_,v=v.next;var tt=y,et=tt.r,rt=tt.g,it=tt.b,nt=tt.a;k+=et,I+=rt,D+=it,B+=nt,C-=et,M-=rt,N-=it,_-=nt,y=y.next,x+=4}m+=i}for(var at=0;at<i;at++){var st=o[x=at<<2],ot=o[x+1],ut=o[x+2],ht=o[x+3],ct=l*st,lt=l*ot,ft=l*ut,gt=l*ht,pt=f*st,dt=f*ot,vt=f*ut,yt=f*ht;p=g;for(var mt=0;mt<l;mt++)p.r=st,p.g=ot,p.b=ut,p.a=ht,p=p.next;for(var xt=i,bt=0,wt=0,St=0,Tt=0,At=1;At<=a;At++){x=xt+at<<2;var Ot=l-At;pt+=(p.r=st=o[x])*Ot,dt+=(p.g=ot=o[x+1])*Ot,vt+=(p.b=ut=o[x+2])*Ot,yt+=(p.a=ht=o[x+3])*Ot,Tt+=st,bt+=ot,wt+=ut,St+=ht,p=p.next,At<c&&(xt+=i)}x=at,v=g,y=s;for(var Pt=0;Pt<n;Pt++){var Et=x<<2;o[Et+3]=ht=yt*b>>w,ht>0?(ht=255/ht,o[Et]=(pt*b>>w)*ht,o[Et+1]=(dt*b>>w)*ht,o[Et+2]=(vt*b>>w)*ht):o[Et]=o[Et+1]=o[Et+2]=0,pt-=ct,dt-=lt,vt-=ft,yt-=gt,ct-=v.r,lt-=v.g,ft-=v.b,gt-=v.a,Et=at+((Et=Pt+l)<c?Et:c)*i<<2,pt+=Tt+=v.r=o[Et],dt+=bt+=v.g=o[Et+1],vt+=wt+=v.b=o[Et+2],yt+=St+=v.a=o[Et+3],v=v.next,ct+=st=y.r,lt+=ot=y.g,ft+=ut=y.b,gt+=ht=y.a,Tt-=st,bt-=ot,wt-=ut,St-=ht,y=y.next,x+=i}}return t}(s,0,0,i,n,a),t.getContext("2d").putImageData(s,e,r)}}var L=function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.r=0,this.g=0,this.b=0,this.a=0,this.next=null};var D=Object.freeze({__proto__:null,offscreen:function(){var{DOMParser:t}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e={window:null,ignoreAnimation:!0,ignoreMouse:!0,DOMParser:t,createCanvas:(t,e)=>new OffscreenCanvas(t,e),createImage:t=>n()((function*(){var e=yield fetch(t),r=yield e.blob();return yield createImageBitmap(r)}))()};return"undefined"==typeof DOMParser&&void 0!==t||Reflect.deleteProperty(e,"DOMParser"),e},node:function(t){var{DOMParser:e,canvas:r,fetch:i}=t;return{window:null,ignoreAnimation:!0,ignoreMouse:!0,DOMParser:e,fetch:i,createCanvas:r.createCanvas,createImage:r.loadImage}}});function B(t){return t.replace(/(?!\u3000)\s+/gm," ")}function j(t){return t.replace(/^[\n \t]+/,"")}function z(t){return t.replace(/[\n \t]+$/,"")}function F(t){return((t||"").match(/-?(\d+(?:\.\d*(?:[eE][+-]?\d+)?)?|\.\d+)(?=\D|$)/gm)||[]).map(parseFloat)}var U=/^[A-Z-]+$/;function H(t){return U.test(t)?t.toLowerCase():t}function X(t){var e=/url\(('([^']+)'|"([^"]+)"|([^'")]+))\)/.exec(t)||[];return e[2]||e[3]||e[4]}function Y(t){if(!t.startsWith("rgb"))return t;var e=3;return t.replace(/\d+(\.\d+)?/g,(t,r)=>e--&&r?String(Math.round(parseFloat(t))):t)}var q=/(\[[^\]]+\])/g,W=/(#[^\s+>~.[:]+)/g,G=/(\.[^\s+>~.[:]+)/g,Q=/(::[^\s+>~.[:]+|:first-line|:first-letter|:before|:after)/gi,$=/(:[\w-]+\([^)]*\))/gi,Z=/(:[^\s+>~.[:]+)/g,K=/([^\s+>~.[:]+)/g;function J(t,e){var r=e.exec(t);return r?[t.replace(e," "),r.length]:[t,0]}function tt(t){var e=[0,0,0],r=t.replace(/:not\(([^)]*)\)/g,"     $1 ").replace(/{[\s\S]*/gm," "),i=0;return[r,i]=J(r,q),e[1]+=i,[r,i]=J(r,W),e[0]+=i,[r,i]=J(r,G),e[1]+=i,[r,i]=J(r,Q),e[2]+=i,[r,i]=J(r,$),e[1]+=i,[r,i]=J(r,Z),e[1]+=i,r=r.replace(/[*\s+>~]/g," ").replace(/[#.]/g," "),[r,i]=J(r,K),e[2]+=i,e.join("")}var et=1e-8;function rt(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2))}function it(t,e){return(t[0]*e[0]+t[1]*e[1])/(rt(t)*rt(e))}function nt(t,e){return(t[0]*e[1]<t[1]*e[0]?-1:1)*Math.acos(it(t,e))}function at(t){return t*t*t}function st(t){return 3*t*t*(1-t)}function ot(t){return 3*t*(1-t)*(1-t)}function ut(t){return(1-t)*(1-t)*(1-t)}function ht(t){return t*t}function ct(t){return 2*t*(1-t)}function lt(t){return(1-t)*(1-t)}class ft{constructor(t,e,r){this.document=t,this.name=e,this.value=r,this.isNormalizedColor=!1}static empty(t){return new ft(t,"EMPTY","")}split(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:" ",{document:e,name:r}=this;return B(this.getString()).trim().split(t).map(t=>new ft(e,r,t))}hasValue(t){var{value:e}=this;return null!==e&&""!==e&&(t||0!==e)&&void 0!==e}isString(t){var{value:e}=this,r="string"==typeof e;return r&&t?t.test(e):r}isUrlDefinition(){return this.isString(/^url\(/)}isPixels(){if(!this.hasValue())return!1;var t=this.getString();switch(!0){case t.endsWith("px"):case/^[0-9]+$/.test(t):return!0;default:return!1}}setValue(t){return this.value=t,this}getValue(t){return void 0===t||this.hasValue()?this.value:t}getNumber(t){if(!this.hasValue())return void 0===t?0:parseFloat(t);var{value:e}=this,r=parseFloat(e);return this.isString(/%$/)&&(r/=100),r}getString(t){return void 0===t||this.hasValue()?void 0===this.value?"":String(this.value):String(t)}getColor(t){var e=this.getString(t);return this.isNormalizedColor||(this.isNormalizedColor=!0,e=Y(e),this.value=e),e}getDpi(){return 96}getRem(){return this.document.rootEmSize}getEm(){return this.document.emSize}getUnits(){return this.getString().replace(/[0-9.-]/g,"")}getPixels(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!this.hasValue())return 0;var[r,i]="boolean"==typeof t?[void 0,t]:[t],{viewPort:n}=this.document.screen;switch(!0){case this.isString(/vmin$/):return this.getNumber()/100*Math.min(n.computeSize("x"),n.computeSize("y"));case this.isString(/vmax$/):return this.getNumber()/100*Math.max(n.computeSize("x"),n.computeSize("y"));case this.isString(/vw$/):return this.getNumber()/100*n.computeSize("x");case this.isString(/vh$/):return this.getNumber()/100*n.computeSize("y");case this.isString(/rem$/):return this.getNumber()*this.getRem();case this.isString(/em$/):return this.getNumber()*this.getEm();case this.isString(/ex$/):return this.getNumber()*this.getEm()/2;case this.isString(/px$/):return this.getNumber();case this.isString(/pt$/):return this.getNumber()*this.getDpi()*(1/72);case this.isString(/pc$/):return 15*this.getNumber();case this.isString(/cm$/):return this.getNumber()*this.getDpi()/2.54;case this.isString(/mm$/):return this.getNumber()*this.getDpi()/25.4;case this.isString(/in$/):return this.getNumber()*this.getDpi();case this.isString(/%$/)&&i:return this.getNumber()*this.getEm();case this.isString(/%$/):return this.getNumber()*n.computeSize(r);default:var a=this.getNumber();return e&&a<1?a*n.computeSize(r):a}}getMilliseconds(){return this.hasValue()?this.isString(/ms$/)?this.getNumber():1e3*this.getNumber():0}getRadians(){if(!this.hasValue())return 0;switch(!0){case this.isString(/deg$/):return this.getNumber()*(Math.PI/180);case this.isString(/grad$/):return this.getNumber()*(Math.PI/200);case this.isString(/rad$/):return this.getNumber();default:return this.getNumber()*(Math.PI/180)}}getDefinition(){var t=this.getString(),e=/#([^)'"]+)/.exec(t);return e&&(e=e[1]),e||(e=t),this.document.definitions[e]}getFillStyleDefinition(t,e){var r=this.getDefinition();if(!r)return null;if("function"==typeof r.createGradient)return r.createGradient(this.document.ctx,t,e);if("function"==typeof r.createPattern){if(r.getHrefAttribute().hasValue()){var i=r.getAttribute("patternTransform");r=r.getHrefAttribute().getDefinition(),i.hasValue()&&r.getAttribute("patternTransform",!0).setValue(i.value)}return r.createPattern(this.document.ctx,t,e)}return null}getTextBaseline(){return this.hasValue()?ft.textBaselineMapping[this.getString()]:null}addOpacity(t){for(var e=this.getColor(),r=e.length,i=0,n=0;n<r&&(","===e[n]&&i++,3!==i);n++);if(t.hasValue()&&this.isString()&&3!==i){var a=new c.a(e);a.ok&&(a.alpha=t.getNumber(),e=a.toRGBA())}return new ft(this.document,this.name,e)}}ft.textBaselineMapping={baseline:"alphabetic","before-edge":"top","text-before-edge":"top",middle:"middle",central:"middle","after-edge":"bottom","text-after-edge":"bottom",ideographic:"ideographic",alphabetic:"alphabetic",hanging:"hanging",mathematical:"alphabetic"};class gt{constructor(){this.viewPorts=[]}clear(){this.viewPorts=[]}setCurrent(t,e){this.viewPorts.push({width:t,height:e})}removeCurrent(){this.viewPorts.pop()}getCurrent(){var{viewPorts:t}=this;return t[t.length-1]}get width(){return this.getCurrent().width}get height(){return this.getCurrent().height}computeSize(t){return"number"==typeof t?t:"x"===t?this.width:"y"===t?this.height:Math.sqrt(Math.pow(this.width,2)+Math.pow(this.height,2))/Math.sqrt(2)}}class pt{constructor(t,e){this.x=t,this.y=e}static parse(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,[r=e,i=e]=F(t);return new pt(r,i)}static parseScale(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,[r=e,i=r]=F(t);return new pt(r,i)}static parsePath(t){for(var e=F(t),r=e.length,i=[],n=0;n<r;n+=2)i.push(new pt(e[n],e[n+1]));return i}angleTo(t){return Math.atan2(t.y-this.y,t.x-this.x)}applyTransform(t){var{x:e,y:r}=this,i=e*t[0]+r*t[2]+t[4],n=e*t[1]+r*t[3]+t[5];this.x=i,this.y=n}}class dt{constructor(t){this.screen=t,this.working=!1,this.events=[],this.eventElements=[],this.onClick=this.onClick.bind(this),this.onMouseMove=this.onMouseMove.bind(this)}isWorking(){return this.working}start(){if(!this.working){var{screen:t,onClick:e,onMouseMove:r}=this,i=t.ctx.canvas;i.onclick=e,i.onmousemove=r,this.working=!0}}stop(){if(this.working){var t=this.screen.ctx.canvas;this.working=!1,t.onclick=null,t.onmousemove=null}}hasEvents(){return this.working&&this.events.length>0}runEvents(){if(this.working){var{screen:t,events:e,eventElements:r}=this,{style:i}=t.ctx.canvas;i&&(i.cursor=""),e.forEach((t,e)=>{for(var{run:i}=t,n=r[e];n;)i(n),n=n.parent}),this.events=[],this.eventElements=[]}}checkPath(t,e){if(this.working&&e){var{events:r,eventElements:i}=this;r.forEach((r,n)=>{var{x:a,y:s}=r;!i[n]&&e.isPointInPath&&e.isPointInPath(a,s)&&(i[n]=t)})}}checkBoundingBox(t,e){if(this.working&&e){var{events:r,eventElements:i}=this;r.forEach((r,n)=>{var{x:a,y:s}=r;!i[n]&&e.isPointInBox(a,s)&&(i[n]=t)})}}mapXY(t,e){for(var{window:r,ctx:i}=this.screen,n=new pt(t,e),a=i.canvas;a;)n.x-=a.offsetLeft,n.y-=a.offsetTop,a=a.offsetParent;return r.scrollX&&(n.x+=r.scrollX),r.scrollY&&(n.y+=r.scrollY),n}onClick(t){var{x:e,y:r}=this.mapXY(t.clientX,t.clientY);this.events.push({type:"onclick",x:e,y:r,run(t){t.onClick&&t.onClick()}})}onMouseMove(t){var{x:e,y:r}=this.mapXY(t.clientX,t.clientY);this.events.push({type:"onmousemove",x:e,y:r,run(t){t.onMouseMove&&t.onMouseMove()}})}}var vt="undefined"!=typeof window?window:null,yt="undefined"!=typeof fetch?fetch.bind(void 0):null;class mt{constructor(t){var{fetch:e=yt,window:r=vt}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.ctx=t,this.FRAMERATE=30,this.MAX_VIRTUAL_PIXELS=3e4,this.CLIENT_WIDTH=800,this.CLIENT_HEIGHT=600,this.viewPort=new gt,this.mouse=new dt(this),this.animations=[],this.waits=[],this.frameDuration=0,this.isReadyLock=!1,this.isFirstRender=!0,this.intervalId=null,this.window=r,this.fetch=e}wait(t){this.waits.push(t)}ready(){return this.readyPromise?this.readyPromise:Promise.resolve()}isReady(){if(this.isReadyLock)return!0;var t=this.waits.every(t=>t());return t&&(this.waits=[],this.resolveReady&&this.resolveReady()),this.isReadyLock=t,t}setDefaults(t){t.strokeStyle="rgba(0,0,0,0)",t.lineCap="butt",t.lineJoin="miter",t.miterLimit=4}setViewBox(t){var{document:e,ctx:r,aspectRatio:i,width:n,desiredWidth:a,height:s,desiredHeight:o,minX:u=0,minY:h=0,refX:c,refY:l,clip:f=!1,clipX:g=0,clipY:p=0}=t,d=B(i).replace(/^defer\s/,""),[v,y]=d.split(" "),m=v||"xMidYMid",x=y||"meet",b=n/a,w=s/o,S=Math.min(b,w),T=Math.max(b,w),A=a,O=o;"meet"===x&&(A*=S,O*=S),"slice"===x&&(A*=T,O*=T);var P=new ft(e,"refX",c),E=new ft(e,"refY",l),C=P.hasValue()&&E.hasValue();if(C&&r.translate(-S*P.getPixels("x"),-S*E.getPixels("y")),f){var M=S*g,N=S*p;r.beginPath(),r.moveTo(M,N),r.lineTo(n,N),r.lineTo(n,s),r.lineTo(M,s),r.closePath(),r.clip()}if(!C){var _="meet"===x&&S===w,V="slice"===x&&T===w,R="meet"===x&&S===b,k="slice"===x&&T===b;m.startsWith("xMid")&&(_||V)&&r.translate(n/2-A/2,0),m.endsWith("YMid")&&(R||k)&&r.translate(0,s/2-O/2),m.startsWith("xMax")&&(_||V)&&r.translate(n-A,0),m.endsWith("YMax")&&(R||k)&&r.translate(0,s-O)}switch(!0){case"none"===m:r.scale(b,w);break;case"meet"===x:r.scale(S,S);break;case"slice"===x:r.scale(T,T)}r.translate(-u,-h)}start(t){var{enableRedraw:e=!1,ignoreMouse:r=!1,ignoreAnimation:i=!1,ignoreDimensions:n=!1,ignoreClear:a=!1,forceRedraw:s,scaleWidth:o,scaleHeight:h,offsetX:c,offsetY:l}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{FRAMERATE:f,mouse:g}=this,p=1e3/f;if(this.frameDuration=p,this.readyPromise=new Promise(t=>{this.resolveReady=t}),this.isReady()&&this.render(t,n,a,o,h,c,l),e){var d=Date.now(),v=d,y=0,m=()=>{d=Date.now(),(y=d-v)>=p&&(v=d-y%p,this.shouldUpdate(i,s)&&(this.render(t,n,a,o,h,c,l),g.runEvents())),this.intervalId=u()(m)};r||g.start(),this.intervalId=u()(m)}}stop(){this.intervalId&&(u.a.cancel(this.intervalId),this.intervalId=null),this.mouse.stop()}shouldUpdate(t,e){if(!t){var{frameDuration:r}=this;if(this.animations.reduce((t,e)=>e.update(r)||t,!1))return!0}return!("function"!=typeof e||!e())||(!(this.isReadyLock||!this.isReady())||!!this.mouse.hasEvents())}render(t,e,r,i,n,a,s){var{CLIENT_WIDTH:o,CLIENT_HEIGHT:u,viewPort:h,ctx:c,isFirstRender:l}=this,f=c.canvas;h.clear(),f.width&&f.height?h.setCurrent(f.width,f.height):h.setCurrent(o,u);var g=t.getStyle("width"),p=t.getStyle("height");!e&&(l||"number"!=typeof i&&"number"!=typeof n)&&(g.hasValue()&&(f.width=g.getPixels("x"),f.style&&(f.style.width="".concat(f.width,"px"))),p.hasValue()&&(f.height=p.getPixels("y"),f.style&&(f.style.height="".concat(f.height,"px"))));var d=f.clientWidth||f.width,v=f.clientHeight||f.height;if(e&&g.hasValue()&&p.hasValue()&&(d=g.getPixels("x"),v=p.getPixels("y")),h.setCurrent(d,v),"number"==typeof a&&t.getAttribute("x",!0).setValue(a),"number"==typeof s&&t.getAttribute("y",!0).setValue(s),"number"==typeof i||"number"==typeof n){var y=F(t.getAttribute("viewBox").getString()),m=0,x=0;if("number"==typeof i){var b=t.getStyle("width");b.hasValue()?m=b.getPixels("x")/i:isNaN(y[2])||(m=y[2]/i)}if("number"==typeof n){var w=t.getStyle("height");w.hasValue()?x=w.getPixels("y")/n:isNaN(y[3])||(x=y[3]/n)}m||(m=x),x||(x=m),t.getAttribute("width",!0).setValue(i),t.getAttribute("height",!0).setValue(n);var S=t.getStyle("transform",!0,!0);S.setValue("".concat(S.getString()," scale(").concat(1/m,", ").concat(1/x,")"))}r||c.clearRect(0,0,d,v),t.render(c),l&&(this.isFirstRender=!1)}}mt.defaultWindow=vt,mt.defaultFetch=yt;var{defaultFetch:xt}=mt,bt="undefined"!=typeof DOMParser?DOMParser:null;class wt{constructor(){var{fetch:t=xt,DOMParser:e=bt}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.fetch=t,this.DOMParser=e}parse(t){var e=this;return n()((function*(){return t.startsWith("<")?e.parseFromString(t):e.load(t)}))()}parseFromString(t){var e=new this.DOMParser;try{return this.checkDocument(e.parseFromString(t,"image/svg+xml"))}catch(r){return this.checkDocument(e.parseFromString(t,"text/xml"))}}checkDocument(t){var e=t.getElementsByTagName("parsererror")[0];if(e)throw new Error(e.textContent);return t}load(t){var e=this;return n()((function*(){var r=yield e.fetch(t),i=yield r.text();return e.parseFromString(i)}))()}}class St{constructor(t,e){this.type="translate",this.point=null,this.point=pt.parse(e)}apply(t){var{x:e,y:r}=this.point;t.translate(e||0,r||0)}unapply(t){var{x:e,y:r}=this.point;t.translate(-1*e||0,-1*r||0)}applyToPoint(t){var{x:e,y:r}=this.point;t.applyTransform([1,0,0,1,e||0,r||0])}}class Tt{constructor(t,e,r){this.type="rotate",this.angle=null,this.originX=null,this.originY=null,this.cx=0,this.cy=0;var i=F(e);this.angle=new ft(t,"angle",i[0]),this.originX=r[0],this.originY=r[1],this.cx=i[1]||0,this.cy=i[2]||0}apply(t){var{cx:e,cy:r,originX:i,originY:n,angle:a}=this,s=e+i.getPixels("x"),o=r+n.getPixels("y");t.translate(s,o),t.rotate(a.getRadians()),t.translate(-s,-o)}unapply(t){var{cx:e,cy:r,originX:i,originY:n,angle:a}=this,s=e+i.getPixels("x"),o=r+n.getPixels("y");t.translate(s,o),t.rotate(-1*a.getRadians()),t.translate(-s,-o)}applyToPoint(t){var{cx:e,cy:r,angle:i}=this,n=i.getRadians();t.applyTransform([1,0,0,1,e||0,r||0]),t.applyTransform([Math.cos(n),Math.sin(n),-Math.sin(n),Math.cos(n),0,0]),t.applyTransform([1,0,0,1,-e||0,-r||0])}}class At{constructor(t,e,r){this.type="scale",this.scale=null,this.originX=null,this.originY=null;var i=pt.parseScale(e);0!==i.x&&0!==i.y||(i.x=et,i.y=et),this.scale=i,this.originX=r[0],this.originY=r[1]}apply(t){var{scale:{x:e,y:r},originX:i,originY:n}=this,a=i.getPixels("x"),s=n.getPixels("y");t.translate(a,s),t.scale(e,r||e),t.translate(-a,-s)}unapply(t){var{scale:{x:e,y:r},originX:i,originY:n}=this,a=i.getPixels("x"),s=n.getPixels("y");t.translate(a,s),t.scale(1/e,1/r||e),t.translate(-a,-s)}applyToPoint(t){var{x:e,y:r}=this.scale;t.applyTransform([e||0,0,0,r||0,0,0])}}class Ot{constructor(t,e,r){this.type="matrix",this.matrix=[],this.originX=null,this.originY=null,this.matrix=F(e),this.originX=r[0],this.originY=r[1]}apply(t){var{originX:e,originY:r,matrix:i}=this,n=e.getPixels("x"),a=r.getPixels("y");t.translate(n,a),t.transform(i[0],i[1],i[2],i[3],i[4],i[5]),t.translate(-n,-a)}unapply(t){var{originX:e,originY:r,matrix:i}=this,n=i[0],a=i[2],s=i[4],o=i[1],u=i[3],h=i[5],c=1/(n*(1*u-0*h)-a*(1*o-0*h)+s*(0*o-0*u)),l=e.getPixels("x"),f=r.getPixels("y");t.translate(l,f),t.transform(c*(1*u-0*h),c*(0*h-1*o),c*(0*s-1*a),c*(1*n-0*s),c*(a*h-s*u),c*(s*o-n*h)),t.translate(-l,-f)}applyToPoint(t){t.applyTransform(this.matrix)}}class Pt extends Ot{constructor(t,e,r){super(t,e,r),this.type="skew",this.angle=null,this.angle=new ft(t,"angle",e)}}class Et extends Pt{constructor(t,e,r){super(t,e,r),this.type="skewX",this.matrix=[1,0,Math.tan(this.angle.getRadians()),1,0,0]}}class Ct extends Pt{constructor(t,e,r){super(t,e,r),this.type="skewY",this.matrix=[1,Math.tan(this.angle.getRadians()),0,1,0,0]}}class Mt{constructor(t,e,r){this.document=t,this.transforms=[],function(t){return B(t).trim().replace(/\)([a-zA-Z])/g,") $1").replace(/\)(\s?,\s?)/g,") ").split(/\s(?=[a-z])/)}(e).forEach(t=>{if("none"!==t){var[e,i]=function(t){var[e,r]=t.split("(");return[e.trim(),r.trim().replace(")","")]}(t),n=Mt.transformTypes[e];void 0!==n&&this.transforms.push(new n(this.document,i,r))}})}static fromElement(t,e){var r=e.getStyle("transform",!1,!0),[i,n=i]=e.getStyle("transform-origin",!1,!0).split(),a=[i,n];return r.hasValue()?new Mt(t,r.getString(),a):null}apply(t){for(var{transforms:e}=this,r=e.length,i=0;i<r;i++)e[i].apply(t)}unapply(t){for(var{transforms:e}=this,r=e.length-1;r>=0;r--)e[r].unapply(t)}applyToPoint(t){for(var{transforms:e}=this,r=e.length,i=0;i<r;i++)e[i].applyToPoint(t)}}Mt.transformTypes={translate:St,rotate:Tt,scale:At,matrix:Ot,skewX:Et,skewY:Ct};class Nt{constructor(t,e){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(this.document=t,this.node=e,this.captureTextNodes=r,this.attributes={},this.styles={},this.stylesSpecificity={},this.animationFrozen=!1,this.animationFrozenValue="",this.parent=null,this.children=[],e&&1===e.nodeType){if(Array.from(e.attributes).forEach(e=>{var r=H(e.nodeName);this.attributes[r]=new ft(t,r,e.value)}),this.addStylesFromStyleDefinition(),this.getAttribute("style").hasValue())this.getAttribute("style").getString().split(";").map(t=>t.trim()).forEach(e=>{if(e){var[r,i]=e.split(":").map(t=>t.trim());this.styles[r]=new ft(t,r,i)}});var{definitions:i}=t,n=this.getAttribute("id");n.hasValue()&&(i[n.getString()]||(i[n.getString()]=this)),Array.from(e.childNodes).forEach(e=>{if(1===e.nodeType)this.addChild(e);else if(r&&(3===e.nodeType||4===e.nodeType)){var i=t.createTextNode(e);i.getText().length>0&&this.addChild(i)}})}}getAttribute(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=this.attributes[t];if(!r&&e){var i=new ft(this.document,t,"");return this.attributes[t]=i,i}return r||ft.empty(this.document)}getHrefAttribute(){for(var t in this.attributes)if("href"===t||t.endsWith(":href"))return this.attributes[t];return ft.empty(this.document)}getStyle(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=this.styles[t];if(i)return i;var n=this.getAttribute(t);if(null!=n&&n.hasValue())return this.styles[t]=n,n;if(!r){var{parent:a}=this;if(a){var s=a.getStyle(t);if(null!=s&&s.hasValue())return s}}if(e){var o=new ft(this.document,t,"");return this.styles[t]=o,o}return i||ft.empty(this.document)}render(t){if("none"!==this.getStyle("display").getString()&&"hidden"!==this.getStyle("visibility").getString()){if(t.save(),this.getStyle("mask").hasValue()){var e=this.getStyle("mask").getDefinition();e&&(this.applyEffects(t),e.apply(t,this))}else if("none"!==this.getStyle("filter").getValue("none")){var r=this.getStyle("filter").getDefinition();r&&(this.applyEffects(t),r.apply(t,this))}else this.setContext(t),this.renderChildren(t),this.clearContext(t);t.restore()}}setContext(t){}applyEffects(t){var e=Mt.fromElement(this.document,this);e&&e.apply(t);var r=this.getStyle("clip-path",!1,!0);if(r.hasValue()){var i=r.getDefinition();i&&i.apply(t)}}clearContext(t){}renderChildren(t){this.children.forEach(e=>{e.render(t)})}addChild(t){var e=t instanceof Nt?t:this.document.createElement(t);e.parent=this,Nt.ignoreChildTypes.includes(e.type)||this.children.push(e)}matchesSelector(t){var{node:e}=this;if("function"==typeof e.matches)return e.matches(t);var r=e.getAttribute("class");return!(!r||""===r)&&r.split(" ").some(e=>".".concat(e)===t)}addStylesFromStyleDefinition(){var{styles:t,stylesSpecificity:e}=this.document;for(var r in t)if(!r.startsWith("@")&&this.matchesSelector(r)){var i=t[r],n=e[r];if(i)for(var a in i){var s=this.stylesSpecificity[a];void 0===s&&(s="000"),n>=s&&(this.styles[a]=i[a],this.stylesSpecificity[a]=n)}}}removeStyles(t,e){return e.reduce((e,r)=>{var i=t.getStyle(r);if(!i.hasValue())return e;var n=i.getString();return i.setValue(""),[...e,[r,n]]},[])}restoreStyles(t,e){e.forEach(e=>{var[r,i]=e;t.getStyle(r,!0).setValue(i)})}}Nt.ignoreChildTypes=["title"];class _t extends Nt{constructor(t,e,r){super(t,e,r)}}function Vt(t){var e=t.trim();return/^('|")/.test(e)?e:'"'.concat(e,'"')}function Rt(t){if(!t)return"";var e=t.trim().toLowerCase();switch(e){case"normal":case"italic":case"oblique":case"inherit":case"initial":case"unset":return e;default:return/^oblique\s+(-|)\d+deg$/.test(e)?e:""}}function kt(t){if(!t)return"";var e=t.trim().toLowerCase();switch(e){case"normal":case"bold":case"lighter":case"bolder":case"inherit":case"initial":case"unset":return e;default:return/^[\d.]+$/.test(e)?e:""}}class It{constructor(t,e,r,i,n,a){var s=a?"string"==typeof a?It.parse(a):a:{};this.fontFamily=n||s.fontFamily,this.fontSize=i||s.fontSize,this.fontStyle=t||s.fontStyle,this.fontWeight=r||s.fontWeight,this.fontVariant=e||s.fontVariant}static parse(){var t=arguments.length>1?arguments[1]:void 0,e="",r="",i="",n="",a="",s=B(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"").trim().split(" "),o={fontSize:!1,fontStyle:!1,fontWeight:!1,fontVariant:!1};return s.forEach(t=>{switch(!0){case!o.fontStyle&&It.styles.includes(t):"inherit"!==t&&(e=t),o.fontStyle=!0;break;case!o.fontVariant&&It.variants.includes(t):"inherit"!==t&&(r=t),o.fontStyle=!0,o.fontVariant=!0;break;case!o.fontWeight&&It.weights.includes(t):"inherit"!==t&&(i=t),o.fontStyle=!0,o.fontVariant=!0,o.fontWeight=!0;break;case!o.fontSize:"inherit"!==t&&([n]=t.split("/")),o.fontStyle=!0,o.fontVariant=!0,o.fontWeight=!0,o.fontSize=!0;break;default:"inherit"!==t&&(a+=t)}}),new It(e,r,i,n,a,t)}toString(){return[Rt(this.fontStyle),this.fontVariant,kt(this.fontWeight),this.fontSize,(t=this.fontFamily,"undefined"==typeof process?t:t.trim().split(",").map(Vt).join(","))].join(" ").trim();var t}}It.styles="normal|italic|oblique|inherit",It.variants="normal|small-caps|inherit",It.weights="normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900|inherit";class Lt{constructor(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Number.NaN,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Number.NaN,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Number.NaN,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:Number.NaN;this.x1=t,this.y1=e,this.x2=r,this.y2=i,this.addPoint(t,e),this.addPoint(r,i)}get x(){return this.x1}get y(){return this.y1}get width(){return this.x2-this.x1}get height(){return this.y2-this.y1}addPoint(t,e){void 0!==t&&((isNaN(this.x1)||isNaN(this.x2))&&(this.x1=t,this.x2=t),t<this.x1&&(this.x1=t),t>this.x2&&(this.x2=t)),void 0!==e&&((isNaN(this.y1)||isNaN(this.y2))&&(this.y1=e,this.y2=e),e<this.y1&&(this.y1=e),e>this.y2&&(this.y2=e))}addX(t){this.addPoint(t,null)}addY(t){this.addPoint(null,t)}addBoundingBox(t){if(t){var{x1:e,y1:r,x2:i,y2:n}=t;this.addPoint(e,r),this.addPoint(i,n)}}sumCubic(t,e,r,i,n){return Math.pow(1-t,3)*e+3*Math.pow(1-t,2)*t*r+3*(1-t)*Math.pow(t,2)*i+Math.pow(t,3)*n}bezierCurveAdd(t,e,r,i,n){var a=6*e-12*r+6*i,s=-3*e+9*r-9*i+3*n,o=3*r-3*e;if(0!==s){var u=Math.pow(a,2)-4*o*s;if(!(u<0)){var h=(-a+Math.sqrt(u))/(2*s);0<h&&h<1&&(t?this.addX(this.sumCubic(h,e,r,i,n)):this.addY(this.sumCubic(h,e,r,i,n)));var c=(-a-Math.sqrt(u))/(2*s);0<c&&c<1&&(t?this.addX(this.sumCubic(c,e,r,i,n)):this.addY(this.sumCubic(c,e,r,i,n)))}}else{if(0===a)return;var l=-o/a;0<l&&l<1&&(t?this.addX(this.sumCubic(l,e,r,i,n)):this.addY(this.sumCubic(l,e,r,i,n)))}}addBezierCurve(t,e,r,i,n,a,s,o){this.addPoint(t,e),this.addPoint(s,o),this.bezierCurveAdd(!0,t,r,n,s),this.bezierCurveAdd(!1,e,i,a,o)}addQuadraticCurve(t,e,r,i,n,a){var s=t+2/3*(r-t),o=e+2/3*(i-e),u=s+1/3*(n-t),h=o+1/3*(a-e);this.addBezierCurve(t,e,s,u,o,h,n,a)}isPointInBox(t,e){var{x1:r,y1:i,x2:n,y2:a}=this;return r<=t&&t<=n&&i<=e&&e<=a}}class Dt extends M{constructor(t){super(t.replace(/([+\-.])\s+/gm,"$1").replace(/[^MmZzLlHhVvCcSsQqTtAae\d\s.,+-].*/g,"")),this.control=null,this.start=null,this.current=null,this.command=null,this.commands=this.commands,this.i=-1,this.previousCommand=null,this.points=[],this.angles=[]}reset(){this.i=-1,this.command=null,this.previousCommand=null,this.start=new pt(0,0),this.control=new pt(0,0),this.current=new pt(0,0),this.points=[],this.angles=[]}isEnd(){var{i:t,commands:e}=this;return t>=e.length-1}next(){var t=this.commands[++this.i];return this.previousCommand=this.command,this.command=t,t}getPoint(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"x",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"y",r=new pt(this.command[t],this.command[e]);return this.makeAbsolute(r)}getAsControlPoint(t,e){var r=this.getPoint(t,e);return this.control=r,r}getAsCurrentPoint(t,e){var r=this.getPoint(t,e);return this.current=r,r}getReflectedControlPoint(){var t=this.previousCommand.type;if(t!==M.CURVE_TO&&t!==M.SMOOTH_CURVE_TO&&t!==M.QUAD_TO&&t!==M.SMOOTH_QUAD_TO)return this.current;var{current:{x:e,y:r},control:{x:i,y:n}}=this;return new pt(2*e-i,2*r-n)}makeAbsolute(t){if(this.command.relative){var{x:e,y:r}=this.current;t.x+=e,t.y+=r}return t}addMarker(t,e,r){var{points:i,angles:n}=this;r&&n.length>0&&!n[n.length-1]&&(n[n.length-1]=i[i.length-1].angleTo(r)),this.addMarkerAngle(t,e?e.angleTo(t):null)}addMarkerAngle(t,e){this.points.push(t),this.angles.push(e)}getMarkerPoints(){return this.points}getMarkerAngles(){for(var{angles:t}=this,e=t.length,r=0;r<e;r++)if(!t[r])for(var i=r+1;i<e;i++)if(t[i]){t[r]=t[i];break}return t}}class Bt extends Nt{constructor(){super(...arguments),this.modifiedEmSizeStack=!1}calculateOpacity(){for(var t=1,e=this;e;){var r=e.getStyle("opacity",!1,!0);r.hasValue(!0)&&(t*=r.getNumber()),e=e.parent}return t}setContext(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!e){var r=this.getStyle("fill"),i=this.getStyle("fill-opacity"),n=this.getStyle("stroke"),a=this.getStyle("stroke-opacity");if(r.isUrlDefinition()){var s=r.getFillStyleDefinition(this,i);s&&(t.fillStyle=s)}else if(r.hasValue()){"currentColor"===r.getString()&&r.setValue(this.getStyle("color").getColor());var o=r.getColor();"inherit"!==o&&(t.fillStyle="none"===o?"rgba(0,0,0,0)":o)}if(i.hasValue()){var u=new ft(this.document,"fill",t.fillStyle).addOpacity(i).getColor();t.fillStyle=u}if(n.isUrlDefinition()){var h=n.getFillStyleDefinition(this,a);h&&(t.strokeStyle=h)}else if(n.hasValue()){"currentColor"===n.getString()&&n.setValue(this.getStyle("color").getColor());var c=n.getString();"inherit"!==c&&(t.strokeStyle="none"===c?"rgba(0,0,0,0)":c)}if(a.hasValue()){var l=new ft(this.document,"stroke",t.strokeStyle).addOpacity(a).getString();t.strokeStyle=l}var f=this.getStyle("stroke-width");if(f.hasValue()){var g=f.getPixels();t.lineWidth=g||et}var p=this.getStyle("stroke-linecap"),d=this.getStyle("stroke-linejoin"),v=this.getStyle("stroke-miterlimit"),y=this.getStyle("stroke-dasharray"),m=this.getStyle("stroke-dashoffset");if(p.hasValue()&&(t.lineCap=p.getString()),d.hasValue()&&(t.lineJoin=d.getString()),v.hasValue()&&(t.miterLimit=v.getNumber()),y.hasValue()&&"none"!==y.getString()){var x=F(y.getString());void 0!==t.setLineDash?t.setLineDash(x):void 0!==t.webkitLineDash?t.webkitLineDash=x:void 0===t.mozDash||1===x.length&&0===x[0]||(t.mozDash=x);var b=m.getPixels();void 0!==t.lineDashOffset?t.lineDashOffset=b:void 0!==t.webkitLineDashOffset?t.webkitLineDashOffset=b:void 0!==t.mozDashOffset&&(t.mozDashOffset=b)}}if(this.modifiedEmSizeStack=!1,void 0!==t.font){var w=this.getStyle("font"),S=this.getStyle("font-style"),T=this.getStyle("font-variant"),A=this.getStyle("font-weight"),O=this.getStyle("font-size"),P=this.getStyle("font-family"),E=new It(S.getString(),T.getString(),A.getString(),O.hasValue()?"".concat(O.getPixels(!0),"px"):"",P.getString(),It.parse(w.getString(),t.font));S.setValue(E.fontStyle),T.setValue(E.fontVariant),A.setValue(E.fontWeight),O.setValue(E.fontSize),P.setValue(E.fontFamily),t.font=E.toString(),O.isPixels()&&(this.document.emSize=O.getPixels(),this.modifiedEmSizeStack=!0)}e||(this.applyEffects(t),t.globalAlpha=this.calculateOpacity())}clearContext(t){super.clearContext(t),this.modifiedEmSizeStack&&this.document.popEmSize()}}class jt extends Bt{constructor(t,e,r){super(t,e,r),this.type="path",this.pathParser=null,this.pathParser=new Dt(this.getAttribute("d").getString())}path(t){var{pathParser:e}=this,r=new Lt;for(e.reset(),t&&t.beginPath();!e.isEnd();)switch(e.next().type){case Dt.MOVE_TO:this.pathM(t,r);break;case Dt.LINE_TO:this.pathL(t,r);break;case Dt.HORIZ_LINE_TO:this.pathH(t,r);break;case Dt.VERT_LINE_TO:this.pathV(t,r);break;case Dt.CURVE_TO:this.pathC(t,r);break;case Dt.SMOOTH_CURVE_TO:this.pathS(t,r);break;case Dt.QUAD_TO:this.pathQ(t,r);break;case Dt.SMOOTH_QUAD_TO:this.pathT(t,r);break;case Dt.ARC:this.pathA(t,r);break;case Dt.CLOSE_PATH:this.pathZ(t,r)}return r}getBoundingBox(t){return this.path()}getMarkers(){var{pathParser:t}=this,e=t.getMarkerPoints(),r=t.getMarkerAngles();return e.map((t,e)=>[t,r[e]])}renderChildren(t){this.path(t),this.document.screen.mouse.checkPath(this,t);var e=this.getStyle("fill-rule");""!==t.fillStyle&&("inherit"!==e.getString("inherit")?t.fill(e.getString()):t.fill()),""!==t.strokeStyle&&("non-scaling-stroke"===this.getAttribute("vector-effect").getString()?(t.save(),t.setTransform(1,0,0,1,0,0),t.stroke(),t.restore()):t.stroke());var r=this.getMarkers();if(r){var i=r.length-1,n=this.getStyle("marker-start"),a=this.getStyle("marker-mid"),s=this.getStyle("marker-end");if(n.isUrlDefinition()){var o=n.getDefinition(),[u,h]=r[0];o.render(t,u,h)}if(a.isUrlDefinition())for(var c=a.getDefinition(),l=1;l<i;l++){var[f,g]=r[l];c.render(t,f,g)}if(s.isUrlDefinition()){var p=s.getDefinition(),[d,v]=r[i];p.render(t,d,v)}}}static pathM(t){var e=t.getAsCurrentPoint();return t.start=t.current,{point:e}}pathM(t,e){var{pathParser:r}=this,{point:i}=jt.pathM(r),{x:n,y:a}=i;r.addMarker(i),e.addPoint(n,a),t&&t.moveTo(n,a)}static pathL(t){var{current:e}=t;return{current:e,point:t.getAsCurrentPoint()}}pathL(t,e){var{pathParser:r}=this,{current:i,point:n}=jt.pathL(r),{x:a,y:s}=n;r.addMarker(n,i),e.addPoint(a,s),t&&t.lineTo(a,s)}static pathH(t){var{current:e,command:r}=t,i=new pt((r.relative?e.x:0)+r.x,e.y);return t.current=i,{current:e,point:i}}pathH(t,e){var{pathParser:r}=this,{current:i,point:n}=jt.pathH(r),{x:a,y:s}=n;r.addMarker(n,i),e.addPoint(a,s),t&&t.lineTo(a,s)}static pathV(t){var{current:e,command:r}=t,i=new pt(e.x,(r.relative?e.y:0)+r.y);return t.current=i,{current:e,point:i}}pathV(t,e){var{pathParser:r}=this,{current:i,point:n}=jt.pathV(r),{x:a,y:s}=n;r.addMarker(n,i),e.addPoint(a,s),t&&t.lineTo(a,s)}static pathC(t){var{current:e}=t;return{current:e,point:t.getPoint("x1","y1"),controlPoint:t.getAsControlPoint("x2","y2"),currentPoint:t.getAsCurrentPoint()}}pathC(t,e){var{pathParser:r}=this,{current:i,point:n,controlPoint:a,currentPoint:s}=jt.pathC(r);r.addMarker(s,a,n),e.addBezierCurve(i.x,i.y,n.x,n.y,a.x,a.y,s.x,s.y),t&&t.bezierCurveTo(n.x,n.y,a.x,a.y,s.x,s.y)}static pathS(t){var{current:e}=t;return{current:e,point:t.getReflectedControlPoint(),controlPoint:t.getAsControlPoint("x2","y2"),currentPoint:t.getAsCurrentPoint()}}pathS(t,e){var{pathParser:r}=this,{current:i,point:n,controlPoint:a,currentPoint:s}=jt.pathS(r);r.addMarker(s,a,n),e.addBezierCurve(i.x,i.y,n.x,n.y,a.x,a.y,s.x,s.y),t&&t.bezierCurveTo(n.x,n.y,a.x,a.y,s.x,s.y)}static pathQ(t){var{current:e}=t;return{current:e,controlPoint:t.getAsControlPoint("x1","y1"),currentPoint:t.getAsCurrentPoint()}}pathQ(t,e){var{pathParser:r}=this,{current:i,controlPoint:n,currentPoint:a}=jt.pathQ(r);r.addMarker(a,n,n),e.addQuadraticCurve(i.x,i.y,n.x,n.y,a.x,a.y),t&&t.quadraticCurveTo(n.x,n.y,a.x,a.y)}static pathT(t){var{current:e}=t,r=t.getReflectedControlPoint();return t.control=r,{current:e,controlPoint:r,currentPoint:t.getAsCurrentPoint()}}pathT(t,e){var{pathParser:r}=this,{current:i,controlPoint:n,currentPoint:a}=jt.pathT(r);r.addMarker(a,n,n),e.addQuadraticCurve(i.x,i.y,n.x,n.y,a.x,a.y),t&&t.quadraticCurveTo(n.x,n.y,a.x,a.y)}static pathA(t){var{current:e,command:r}=t,{rX:i,rY:n,xRot:a,lArcFlag:s,sweepFlag:o}=r,u=a*(Math.PI/180),h=t.getAsCurrentPoint(),c=new pt(Math.cos(u)*(e.x-h.x)/2+Math.sin(u)*(e.y-h.y)/2,-Math.sin(u)*(e.x-h.x)/2+Math.cos(u)*(e.y-h.y)/2),l=Math.pow(c.x,2)/Math.pow(i,2)+Math.pow(c.y,2)/Math.pow(n,2);l>1&&(i*=Math.sqrt(l),n*=Math.sqrt(l));var f=(s===o?-1:1)*Math.sqrt((Math.pow(i,2)*Math.pow(n,2)-Math.pow(i,2)*Math.pow(c.y,2)-Math.pow(n,2)*Math.pow(c.x,2))/(Math.pow(i,2)*Math.pow(c.y,2)+Math.pow(n,2)*Math.pow(c.x,2)));isNaN(f)&&(f=0);var g=new pt(f*i*c.y/n,f*-n*c.x/i),p=new pt((e.x+h.x)/2+Math.cos(u)*g.x-Math.sin(u)*g.y,(e.y+h.y)/2+Math.sin(u)*g.x+Math.cos(u)*g.y),d=nt([1,0],[(c.x-g.x)/i,(c.y-g.y)/n]),v=[(c.x-g.x)/i,(c.y-g.y)/n],y=[(-c.x-g.x)/i,(-c.y-g.y)/n],m=nt(v,y);return it(v,y)<=-1&&(m=Math.PI),it(v,y)>=1&&(m=0),{currentPoint:h,rX:i,rY:n,sweepFlag:o,xAxisRotation:u,centp:p,a1:d,ad:m}}pathA(t,e){var{pathParser:r}=this,{currentPoint:i,rX:n,rY:a,sweepFlag:s,xAxisRotation:o,centp:u,a1:h,ad:c}=jt.pathA(r),l=1-s?1:-1,f=h+l*(c/2),g=new pt(u.x+n*Math.cos(f),u.y+a*Math.sin(f));if(r.addMarkerAngle(g,f-l*Math.PI/2),r.addMarkerAngle(i,f-l*Math.PI),e.addPoint(i.x,i.y),t&&!isNaN(h)&&!isNaN(c)){var p=n>a?n:a,d=n>a?1:n/a,v=n>a?a/n:1;t.translate(u.x,u.y),t.rotate(o),t.scale(d,v),t.arc(0,0,p,h,h+c,Boolean(1-s)),t.scale(1/d,1/v),t.rotate(-o),t.translate(-u.x,-u.y)}}static pathZ(t){t.current=t.start}pathZ(t,e){jt.pathZ(this.pathParser),t&&e.x1!==e.x2&&e.y1!==e.y2&&t.closePath()}}class zt extends jt{constructor(t,e,r){super(t,e,r),this.type="glyph",this.horizAdvX=this.getAttribute("horiz-adv-x").getNumber(),this.unicode=this.getAttribute("unicode").getString(),this.arabicForm=this.getAttribute("arabic-form").getString()}}class Ft extends Bt{constructor(t,e,r){super(t,e,new.target===Ft||r),this.type="text",this.x=0,this.y=0,this.measureCache=-1}setContext(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];super.setContext(t,e);var r=this.getStyle("dominant-baseline").getTextBaseline()||this.getStyle("alignment-baseline").getTextBaseline();r&&(t.textBaseline=r)}initializeCoordinates(t){this.x=this.getAttribute("x").getPixels("x"),this.y=this.getAttribute("y").getPixels("y");var e=this.getAttribute("dx"),r=this.getAttribute("dy");e.hasValue()&&(this.x+=e.getPixels("x")),r.hasValue()&&(this.y+=r.getPixels("y")),this.x+=this.getAnchorDelta(t,this,0)}getBoundingBox(t){if("text"!==this.type)return this.getTElementBoundingBox(t);this.initializeCoordinates(t);var e=null;return this.children.forEach((r,i)=>{var n=this.getChildBoundingBox(t,this,this,i);e?e.addBoundingBox(n):e=n}),e}getFontSize(){var{document:t,parent:e}=this,r=It.parse(t.ctx.font).fontSize;return e.getStyle("font-size").getNumber(r)}getTElementBoundingBox(t){var e=this.getFontSize();return new Lt(this.x,this.y-e,this.x+this.measureText(t),this.y)}getGlyph(t,e,r){var i=e[r],n=null;if(t.isArabic){var a=e.length,s=e[r-1],o=e[r+1],u="isolated";if((0===r||" "===s)&&r<a-2&&" "!==o&&(u="terminal"),r>0&&" "!==s&&r<a-2&&" "!==o&&(u="medial"),r>0&&" "!==s&&(r===a-1||" "===o)&&(u="initial"),void 0!==t.glyphs[i]){var h=t.glyphs[i];n=h instanceof zt?h:h[u]}}else n=t.glyphs[i];return n||(n=t.missingGlyph),n}getText(){return""}getTextFromNode(t){var e=t||this.node,r=Array.from(e.parentNode.childNodes),i=r.indexOf(e),n=r.length-1,a=B(e.textContent||"");return 0===i&&(a=j(a)),i===n&&(a=z(a)),a}renderChildren(t){if("text"===this.type){this.initializeCoordinates(t),this.children.forEach((e,r)=>{this.renderChild(t,this,this,r)});var{mouse:e}=this.document.screen;e.isWorking()&&e.checkBoundingBox(this,this.getBoundingBox(t))}else this.renderTElementChildren(t)}renderTElementChildren(t){var{document:e,parent:r}=this,i=this.getText(),n=r.getStyle("font-family").getDefinition();if(n)for(var{unitsPerEm:a}=n.fontFace,s=It.parse(e.ctx.font),o=r.getStyle("font-size").getNumber(s.fontSize),u=r.getStyle("font-style").getString(s.fontStyle),h=o/a,c=n.isRTL?i.split("").reverse().join(""):i,l=F(r.getAttribute("dx").getString()),f=c.length,g=0;g<f;g++){var p=this.getGlyph(n,c,g);t.translate(this.x,this.y),t.scale(h,-h);var d=t.lineWidth;t.lineWidth=t.lineWidth*a/o,"italic"===u&&t.transform(1,0,.4,1,0,0),p.render(t),"italic"===u&&t.transform(1,0,-.4,1,0,0),t.lineWidth=d,t.scale(1/h,-1/h),t.translate(-this.x,-this.y),this.x+=o*(p.horizAdvX||n.horizAdvX)/a,void 0===l[g]||isNaN(l[g])||(this.x+=l[g])}else{var{x:v,y:y}=this;t.fillStyle&&t.fillText(i,v,y),t.strokeStyle&&t.strokeText(i,v,y)}}getAnchorDelta(t,e,r){var i=this.getStyle("text-anchor").getString("start");if("start"!==i){for(var{children:n}=e,a=n.length,s=null,o=0,u=r;u<a&&(s=n[u],!(u>r&&s.getAttribute("x").hasValue()||s.getAttribute("text-anchor").hasValue()));u++)o+=s.measureTextRecursive(t);return-1*("end"===i?o:o/2)}return 0}adjustChildCoordinates(t,e,r,i){var n=r.children[i];if("function"!=typeof n.measureText)return n;t.save(),n.setContext(t,!0);var a=n.getAttribute("x"),s=n.getAttribute("y"),o=n.getAttribute("dx"),u=n.getAttribute("dy"),h=n.getAttribute("text-anchor").getString("start");if(0===i&&"textNode"!==n.type&&(a.hasValue()||a.setValue(e.getAttribute("x").getValue("0")),s.hasValue()||s.setValue(e.getAttribute("y").getValue("0")),o.hasValue()||o.setValue(e.getAttribute("dx").getValue("0")),u.hasValue()||u.setValue(e.getAttribute("dy").getValue("0"))),a.hasValue()){if(n.x=a.getPixels("x")+e.getAnchorDelta(t,r,i),"start"!==h){var c=n.measureTextRecursive(t);n.x+=-1*("end"===h?c:c/2)}o.hasValue()&&(n.x+=o.getPixels("x"))}else{if("start"!==h){var l=n.measureTextRecursive(t);e.x+=-1*("end"===h?l:l/2)}o.hasValue()&&(e.x+=o.getPixels("x")),n.x=e.x}return e.x=n.x+n.measureText(t),s.hasValue()?(n.y=s.getPixels("y"),u.hasValue()&&(n.y+=u.getPixels("y"))):(u.hasValue()&&(e.y+=u.getPixels("y")),n.y=e.y),e.y=n.y,n.clearContext(t),t.restore(),n}getChildBoundingBox(t,e,r,i){var n=this.adjustChildCoordinates(t,e,r,i);if("function"!=typeof n.getBoundingBox)return null;var a=n.getBoundingBox(t);return a?(n.children.forEach((r,i)=>{var s=e.getChildBoundingBox(t,e,n,i);a.addBoundingBox(s)}),a):null}renderChild(t,e,r,i){var n=this.adjustChildCoordinates(t,e,r,i);n.render(t),n.children.forEach((r,i)=>{e.renderChild(t,e,n,i)})}measureTextRecursive(t){return this.children.reduce((e,r)=>e+r.measureTextRecursive(t),this.measureText(t))}measureText(t){var{measureCache:e}=this;if(~e)return e;var r=this.getText(),i=this.measureTargetText(t,r);return this.measureCache=i,i}measureTargetText(t,e){if(!e.length)return 0;var{parent:r}=this,i=r.getStyle("font-family").getDefinition();if(i){for(var n=this.getFontSize(),a=i.isRTL?e.split("").reverse().join(""):e,s=F(r.getAttribute("dx").getString()),o=a.length,u=0,h=0;h<o;h++){u+=(this.getGlyph(i,a,h).horizAdvX||i.horizAdvX)*n/i.fontFace.unitsPerEm,void 0===s[h]||isNaN(s[h])||(u+=s[h])}return u}if(!t.measureText)return 10*e.length;t.save(),this.setContext(t,!0);var{width:c}=t.measureText(e);return this.clearContext(t),t.restore(),c}}class Ut extends Ft{constructor(t,e,r){super(t,e,new.target===Ut||r),this.type="tspan",this.text=this.children.length>0?"":this.getTextFromNode()}getText(){return this.text}}class Ht extends Ut{constructor(){super(...arguments),this.type="textNode"}}class Xt extends Bt{constructor(){super(...arguments),this.type="svg",this.root=!1}setContext(t){var e,{document:r}=this,{screen:i,window:n}=r,a=t.canvas;if(i.setDefaults(t),a.style&&void 0!==t.font&&n&&void 0!==n.getComputedStyle){t.font=n.getComputedStyle(a).getPropertyValue("font");var s=new ft(r,"fontSize",It.parse(t.font).fontSize);s.hasValue()&&(r.rootEmSize=s.getPixels("y"),r.emSize=r.rootEmSize)}this.getAttribute("x").hasValue()||this.getAttribute("x",!0).setValue(0),this.getAttribute("y").hasValue()||this.getAttribute("y",!0).setValue(0);var{width:o,height:u}=i.viewPort;this.getStyle("width").hasValue()||this.getStyle("width",!0).setValue("100%"),this.getStyle("height").hasValue()||this.getStyle("height",!0).setValue("100%"),this.getStyle("color").hasValue()||this.getStyle("color",!0).setValue("black");var h=this.getAttribute("refX"),c=this.getAttribute("refY"),l=this.getAttribute("viewBox"),f=l.hasValue()?F(l.getString()):null,g=!this.root&&"visible"!==this.getStyle("overflow").getValue("hidden"),p=0,d=0,v=0,y=0;f&&(p=f[0],d=f[1]),this.root||(o=this.getStyle("width").getPixels("x"),u=this.getStyle("height").getPixels("y"),"marker"===this.type&&(v=p,y=d,p=0,d=0)),i.viewPort.setCurrent(o,u),!this.node||this.parent&&"foreignObject"!==(null===(e=this.node.parentNode)||void 0===e?void 0:e.nodeName)||!this.getStyle("transform",!1,!0).hasValue()||this.getStyle("transform-origin",!1,!0).hasValue()||this.getStyle("transform-origin",!0,!0).setValue("50% 50%"),super.setContext(t),t.translate(this.getAttribute("x").getPixels("x"),this.getAttribute("y").getPixels("y")),f&&(o=f[2],u=f[3]),r.setViewBox({ctx:t,aspectRatio:this.getAttribute("preserveAspectRatio").getString(),width:i.viewPort.width,desiredWidth:o,height:i.viewPort.height,desiredHeight:u,minX:p,minY:d,refX:h.getValue(),refY:c.getValue(),clip:g,clipX:v,clipY:y}),f&&(i.viewPort.removeCurrent(),i.viewPort.setCurrent(o,u))}clearContext(t){super.clearContext(t),this.document.screen.viewPort.removeCurrent()}resize(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=this.getAttribute("width",!0),n=this.getAttribute("height",!0),a=this.getAttribute("viewBox"),s=this.getAttribute("style"),o=i.getNumber(0),u=n.getNumber(0);if(r)if("string"==typeof r)this.getAttribute("preserveAspectRatio",!0).setValue(r);else{var h=this.getAttribute("preserveAspectRatio");h.hasValue()&&h.setValue(h.getString().replace(/^\s*(\S.*\S)\s*$/,"$1"))}if(i.setValue(t),n.setValue(e),a.hasValue()||a.setValue("0 0 ".concat(o||t," ").concat(u||e)),s.hasValue()){var c=this.getStyle("width"),l=this.getStyle("height");c.hasValue()&&c.setValue("".concat(t,"px")),l.hasValue()&&l.setValue("".concat(e,"px"))}}}class Yt extends jt{constructor(){super(...arguments),this.type="rect"}path(t){var e=this.getAttribute("x").getPixels("x"),r=this.getAttribute("y").getPixels("y"),i=this.getStyle("width",!1,!0).getPixels("x"),n=this.getStyle("height",!1,!0).getPixels("y"),a=this.getAttribute("rx"),s=this.getAttribute("ry"),o=a.getPixels("x"),u=s.getPixels("y");if(a.hasValue()&&!s.hasValue()&&(u=o),s.hasValue()&&!a.hasValue()&&(o=u),o=Math.min(o,i/2),u=Math.min(u,n/2),t){var h=(Math.sqrt(2)-1)/3*4;t.beginPath(),n>0&&i>0&&(t.moveTo(e+o,r),t.lineTo(e+i-o,r),t.bezierCurveTo(e+i-o+h*o,r,e+i,r+u-h*u,e+i,r+u),t.lineTo(e+i,r+n-u),t.bezierCurveTo(e+i,r+n-u+h*u,e+i-o+h*o,r+n,e+i-o,r+n),t.lineTo(e+o,r+n),t.bezierCurveTo(e+o-h*o,r+n,e,r+n-u+h*u,e,r+n-u),t.lineTo(e,r+u),t.bezierCurveTo(e,r+u-h*u,e+o-h*o,r,e+o,r),t.closePath())}return new Lt(e,r,e+i,r+n)}getMarkers(){return null}}class qt extends jt{constructor(){super(...arguments),this.type="circle"}path(t){var e=this.getAttribute("cx").getPixels("x"),r=this.getAttribute("cy").getPixels("y"),i=this.getAttribute("r").getPixels();return t&&i>0&&(t.beginPath(),t.arc(e,r,i,0,2*Math.PI,!1),t.closePath()),new Lt(e-i,r-i,e+i,r+i)}getMarkers(){return null}}class Wt extends jt{constructor(){super(...arguments),this.type="ellipse"}path(t){var e=(Math.sqrt(2)-1)/3*4,r=this.getAttribute("rx").getPixels("x"),i=this.getAttribute("ry").getPixels("y"),n=this.getAttribute("cx").getPixels("x"),a=this.getAttribute("cy").getPixels("y");return t&&r>0&&i>0&&(t.beginPath(),t.moveTo(n+r,a),t.bezierCurveTo(n+r,a+e*i,n+e*r,a+i,n,a+i),t.bezierCurveTo(n-e*r,a+i,n-r,a+e*i,n-r,a),t.bezierCurveTo(n-r,a-e*i,n-e*r,a-i,n,a-i),t.bezierCurveTo(n+e*r,a-i,n+r,a-e*i,n+r,a),t.closePath()),new Lt(n-r,a-i,n+r,a+i)}getMarkers(){return null}}class Gt extends jt{constructor(){super(...arguments),this.type="line"}getPoints(){return[new pt(this.getAttribute("x1").getPixels("x"),this.getAttribute("y1").getPixels("y")),new pt(this.getAttribute("x2").getPixels("x"),this.getAttribute("y2").getPixels("y"))]}path(t){var[{x:e,y:r},{x:i,y:n}]=this.getPoints();return t&&(t.beginPath(),t.moveTo(e,r),t.lineTo(i,n)),new Lt(e,r,i,n)}getMarkers(){var[t,e]=this.getPoints(),r=t.angleTo(e);return[[t,r],[e,r]]}}class Qt extends jt{constructor(t,e,r){super(t,e,r),this.type="polyline",this.points=[],this.points=pt.parsePath(this.getAttribute("points").getString())}path(t){var{points:e}=this,[{x:r,y:i}]=e,n=new Lt(r,i);return t&&(t.beginPath(),t.moveTo(r,i)),e.forEach(e=>{var{x:r,y:i}=e;n.addPoint(r,i),t&&t.lineTo(r,i)}),n}getMarkers(){var{points:t}=this,e=t.length-1,r=[];return t.forEach((i,n)=>{n!==e&&r.push([i,i.angleTo(t[n+1])])}),r.length>0&&r.push([t[t.length-1],r[r.length-1][1]]),r}}class $t extends Qt{constructor(){super(...arguments),this.type="polygon"}path(t){var e=super.path(t),[{x:r,y:i}]=this.points;return t&&(t.lineTo(r,i),t.closePath()),e}}class Zt extends Nt{constructor(){super(...arguments),this.type="pattern"}createPattern(t,e,r){var i=this.getStyle("width").getPixels("x",!0),n=this.getStyle("height").getPixels("y",!0),a=new Xt(this.document,null);a.attributes.viewBox=new ft(this.document,"viewBox",this.getAttribute("viewBox").getValue()),a.attributes.width=new ft(this.document,"width","".concat(i,"px")),a.attributes.height=new ft(this.document,"height","".concat(n,"px")),a.attributes.transform=new ft(this.document,"transform",this.getAttribute("patternTransform").getValue()),a.children=this.children;var s=this.document.createCanvas(i,n),o=s.getContext("2d"),u=this.getAttribute("x"),h=this.getAttribute("y");u.hasValue()&&h.hasValue()&&o.translate(u.getPixels("x",!0),h.getPixels("y",!0)),r.hasValue()?this.styles["fill-opacity"]=r:Reflect.deleteProperty(this.styles,"fill-opacity");for(var c=-1;c<=1;c++)for(var l=-1;l<=1;l++)o.save(),a.attributes.x=new ft(this.document,"x",c*s.width),a.attributes.y=new ft(this.document,"y",l*s.height),a.render(o),o.restore();return t.createPattern(s,"repeat")}}class Kt extends Nt{constructor(){super(...arguments),this.type="marker"}render(t,e,r){if(e){var{x:i,y:n}=e,a=this.getAttribute("orient").getString("auto"),s=this.getAttribute("markerUnits").getString("strokeWidth");t.translate(i,n),"auto"===a&&t.rotate(r),"strokeWidth"===s&&t.scale(t.lineWidth,t.lineWidth),t.save();var o=new Xt(this.document,null);o.type=this.type,o.attributes.viewBox=new ft(this.document,"viewBox",this.getAttribute("viewBox").getValue()),o.attributes.refX=new ft(this.document,"refX",this.getAttribute("refX").getValue()),o.attributes.refY=new ft(this.document,"refY",this.getAttribute("refY").getValue()),o.attributes.width=new ft(this.document,"width",this.getAttribute("markerWidth").getValue()),o.attributes.height=new ft(this.document,"height",this.getAttribute("markerHeight").getValue()),o.attributes.overflow=new ft(this.document,"overflow",this.getAttribute("overflow").getValue()),o.attributes.fill=new ft(this.document,"fill",this.getAttribute("fill").getColor("black")),o.attributes.stroke=new ft(this.document,"stroke",this.getAttribute("stroke").getValue("none")),o.children=this.children,o.render(t),t.restore(),"strokeWidth"===s&&t.scale(1/t.lineWidth,1/t.lineWidth),"auto"===a&&t.rotate(-r),t.translate(-i,-n)}}}class Jt extends Nt{constructor(){super(...arguments),this.type="defs"}render(){}}class te extends Bt{constructor(){super(...arguments),this.type="g"}getBoundingBox(t){var e=new Lt;return this.children.forEach(r=>{e.addBoundingBox(r.getBoundingBox(t))}),e}}class ee extends Nt{constructor(t,e,r){super(t,e,r),this.attributesToInherit=["gradientUnits"],this.stops=[];var{stops:i,children:n}=this;n.forEach(t=>{"stop"===t.type&&i.push(t)})}getGradientUnits(){return this.getAttribute("gradientUnits").getString("objectBoundingBox")}createGradient(t,e,r){var i=this;this.getHrefAttribute().hasValue()&&(i=this.getHrefAttribute().getDefinition(),this.inheritStopContainer(i));var{stops:n}=i,a=this.getGradient(t,e);if(!a)return this.addParentOpacity(r,n[n.length-1].color);if(n.forEach(t=>{a.addColorStop(t.offset,this.addParentOpacity(r,t.color))}),this.getAttribute("gradientTransform").hasValue()){var{document:s}=this,{MAX_VIRTUAL_PIXELS:o,viewPort:u}=s.screen,[h]=u.viewPorts,c=new Yt(s,null);c.attributes.x=new ft(s,"x",-o/3),c.attributes.y=new ft(s,"y",-o/3),c.attributes.width=new ft(s,"width",o),c.attributes.height=new ft(s,"height",o);var l=new te(s,null);l.attributes.transform=new ft(s,"transform",this.getAttribute("gradientTransform").getValue()),l.children=[c];var f=new Xt(s,null);f.attributes.x=new ft(s,"x",0),f.attributes.y=new ft(s,"y",0),f.attributes.width=new ft(s,"width",h.width),f.attributes.height=new ft(s,"height",h.height),f.children=[l];var g=s.createCanvas(h.width,h.height),p=g.getContext("2d");return p.fillStyle=a,f.render(p),p.createPattern(g,"no-repeat")}return a}inheritStopContainer(t){this.attributesToInherit.forEach(e=>{!this.getAttribute(e).hasValue()&&t.getAttribute(e).hasValue()&&this.getAttribute(e,!0).setValue(t.getAttribute(e).getValue())})}addParentOpacity(t,e){return t.hasValue()?new ft(this.document,"color",e).addOpacity(t).getColor():e}}class re extends ee{constructor(t,e,r){super(t,e,r),this.type="linearGradient",this.attributesToInherit.push("x1","y1","x2","y2")}getGradient(t,e){var r="objectBoundingBox"===this.getGradientUnits(),i=r?e.getBoundingBox(t):null;if(r&&!i)return null;this.getAttribute("x1").hasValue()||this.getAttribute("y1").hasValue()||this.getAttribute("x2").hasValue()||this.getAttribute("y2").hasValue()||(this.getAttribute("x1",!0).setValue(0),this.getAttribute("y1",!0).setValue(0),this.getAttribute("x2",!0).setValue(1),this.getAttribute("y2",!0).setValue(0));var n=r?i.x+i.width*this.getAttribute("x1").getNumber():this.getAttribute("x1").getPixels("x"),a=r?i.y+i.height*this.getAttribute("y1").getNumber():this.getAttribute("y1").getPixels("y"),s=r?i.x+i.width*this.getAttribute("x2").getNumber():this.getAttribute("x2").getPixels("x"),o=r?i.y+i.height*this.getAttribute("y2").getNumber():this.getAttribute("y2").getPixels("y");return n===s&&a===o?null:t.createLinearGradient(n,a,s,o)}}class ie extends ee{constructor(t,e,r){super(t,e,r),this.type="radialGradient",this.attributesToInherit.push("cx","cy","r","fx","fy","fr")}getGradient(t,e){var r="objectBoundingBox"===this.getGradientUnits(),i=e.getBoundingBox(t);if(r&&!i)return null;this.getAttribute("cx").hasValue()||this.getAttribute("cx",!0).setValue("50%"),this.getAttribute("cy").hasValue()||this.getAttribute("cy",!0).setValue("50%"),this.getAttribute("r").hasValue()||this.getAttribute("r",!0).setValue("50%");var n=r?i.x+i.width*this.getAttribute("cx").getNumber():this.getAttribute("cx").getPixels("x"),a=r?i.y+i.height*this.getAttribute("cy").getNumber():this.getAttribute("cy").getPixels("y"),s=n,o=a;this.getAttribute("fx").hasValue()&&(s=r?i.x+i.width*this.getAttribute("fx").getNumber():this.getAttribute("fx").getPixels("x")),this.getAttribute("fy").hasValue()&&(o=r?i.y+i.height*this.getAttribute("fy").getNumber():this.getAttribute("fy").getPixels("y"));var u=r?(i.width+i.height)/2*this.getAttribute("r").getNumber():this.getAttribute("r").getPixels(),h=this.getAttribute("fr").getPixels();return t.createRadialGradient(s,o,h,n,a,u)}}class ne extends Nt{constructor(t,e,r){super(t,e,r),this.type="stop";var i=Math.max(0,Math.min(1,this.getAttribute("offset").getNumber())),n=this.getStyle("stop-opacity"),a=this.getStyle("stop-color",!0);""===a.getString()&&a.setValue("#000"),n.hasValue()&&(a=a.addOpacity(n)),this.offset=i,this.color=a.getColor()}}class ae extends Nt{constructor(t,e,r){super(t,e,r),this.type="animate",this.duration=0,this.initialValue=null,this.initialUnits="",this.removed=!1,this.frozen=!1,t.screen.animations.push(this),this.begin=this.getAttribute("begin").getMilliseconds(),this.maxDuration=this.begin+this.getAttribute("dur").getMilliseconds(),this.from=this.getAttribute("from"),this.to=this.getAttribute("to"),this.values=new ft(t,"values",null);var i=this.getAttribute("values");i.hasValue()&&this.values.setValue(i.getString().split(";"))}getProperty(){var t=this.getAttribute("attributeType").getString(),e=this.getAttribute("attributeName").getString();return"CSS"===t?this.parent.getStyle(e,!0):this.parent.getAttribute(e,!0)}calcValue(){var{initialUnits:t}=this,{progress:e,from:r,to:i}=this.getProgress(),n=r.getNumber()+(i.getNumber()-r.getNumber())*e;return"%"===t&&(n*=100),"".concat(n).concat(t)}update(t){var{parent:e}=this,r=this.getProperty();if(this.initialValue||(this.initialValue=r.getString(),this.initialUnits=r.getUnits()),this.duration>this.maxDuration){var i=this.getAttribute("fill").getString("remove");if("indefinite"===this.getAttribute("repeatCount").getString()||"indefinite"===this.getAttribute("repeatDur").getString())this.duration=0;else if("freeze"!==i||this.frozen){if("remove"===i&&!this.removed)return this.removed=!0,r.setValue(e.animationFrozen?e.animationFrozenValue:this.initialValue),!0}else this.frozen=!0,e.animationFrozen=!0,e.animationFrozenValue=r.getString();return!1}this.duration+=t;var n=!1;if(this.begin<this.duration){var a=this.calcValue(),s=this.getAttribute("type");if(s.hasValue()){var o=s.getString();a="".concat(o,"(").concat(a,")")}r.setValue(a),n=!0}return n}getProgress(){var{document:t,values:e}=this,r={progress:(this.duration-this.begin)/(this.maxDuration-this.begin)};if(e.hasValue()){var i=r.progress*(e.getValue().length-1),n=Math.floor(i),a=Math.ceil(i);r.from=new ft(t,"from",parseFloat(e.getValue()[n])),r.to=new ft(t,"to",parseFloat(e.getValue()[a])),r.progress=(i-n)/(a-n)}else r.from=this.from,r.to=this.to;return r}}class se extends ae{constructor(){super(...arguments),this.type="animateColor"}calcValue(){var{progress:t,from:e,to:r}=this.getProgress(),i=new c.a(e.getColor()),n=new c.a(r.getColor());if(i.ok&&n.ok){var a=i.r+(n.r-i.r)*t,s=i.g+(n.g-i.g)*t,o=i.b+(n.b-i.b)*t;return"rgb(".concat(Math.floor(a),", ").concat(Math.floor(s),", ").concat(Math.floor(o),")")}return this.getAttribute("from").getColor()}}class oe extends ae{constructor(){super(...arguments),this.type="animateTransform"}calcValue(){var{progress:t,from:e,to:r}=this.getProgress(),i=F(e.getString()),n=F(r.getString());return i.map((e,r)=>e+(n[r]-e)*t).join(" ")}}class ue extends Nt{constructor(t,e,r){super(t,e,r),this.type="font",this.glyphs={},this.horizAdvX=this.getAttribute("horiz-adv-x").getNumber();var{definitions:i}=t,{children:n}=this;for(var a of n)switch(a.type){case"font-face":this.fontFace=a;var s=a.getStyle("font-family");s.hasValue()&&(i[s.getString()]=this);break;case"missing-glyph":this.missingGlyph=a;break;case"glyph":var o=a;o.arabicForm?(this.isRTL=!0,this.isArabic=!0,void 0===this.glyphs[o.unicode]&&(this.glyphs[o.unicode]={}),this.glyphs[o.unicode][o.arabicForm]=o):this.glyphs[o.unicode]=o}}render(){}}class he extends Nt{constructor(t,e,r){super(t,e,r),this.type="font-face",this.ascent=this.getAttribute("ascent").getNumber(),this.descent=this.getAttribute("descent").getNumber(),this.unitsPerEm=this.getAttribute("units-per-em").getNumber()}}class ce extends jt{constructor(){super(...arguments),this.type="missing-glyph",this.horizAdvX=0}}class le extends Ft{constructor(){super(...arguments),this.type="tref"}getText(){var t=this.getHrefAttribute().getDefinition();if(t){var e=t.children[0];if(e)return e.getText()}return""}}class fe extends Ft{constructor(t,e,r){super(t,e,r),this.type="a";var{childNodes:i}=e,n=i[0],a=i.length>0&&Array.from(i).every(t=>3===t.nodeType);this.hasText=a,this.text=a?this.getTextFromNode(n):""}getText(){return this.text}renderChildren(t){if(this.hasText){super.renderChildren(t);var{document:e,x:r,y:i}=this,{mouse:n}=e.screen,a=new ft(e,"fontSize",It.parse(e.ctx.font).fontSize);n.isWorking()&&n.checkBoundingBox(this,new Lt(r,i-a.getPixels("y"),r+this.measureText(t),i))}else if(this.children.length>0){var s=new te(this.document,null);s.children=this.children,s.parent=this,s.render(t)}}onClick(){var{window:t}=this.document;t&&t.open(this.getHrefAttribute().getString())}onMouseMove(){this.document.ctx.canvas.style.cursor="pointer"}}function ge(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,i)}return r}function pe(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?ge(Object(r),!0).forEach((function(e){s()(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):ge(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}class de extends Ft{constructor(t,e,r){super(t,e,r),this.type="textPath",this.textWidth=0,this.textHeight=0,this.pathLength=-1,this.glyphInfo=null,this.letterSpacingCache=[],this.measuresCache=new Map([["",0]]);var i=this.getHrefAttribute().getDefinition();this.text=this.getTextFromNode(),this.dataArray=this.parsePathData(i)}getText(){return this.text}path(t){var{dataArray:e}=this;t&&t.beginPath(),e.forEach(e=>{var{type:r,points:i}=e;switch(r){case Dt.LINE_TO:t&&t.lineTo(i[0],i[1]);break;case Dt.MOVE_TO:t&&t.moveTo(i[0],i[1]);break;case Dt.CURVE_TO:t&&t.bezierCurveTo(i[0],i[1],i[2],i[3],i[4],i[5]);break;case Dt.QUAD_TO:t&&t.quadraticCurveTo(i[0],i[1],i[2],i[3]);break;case Dt.ARC:var[n,a,s,o,u,h,c,l]=i,f=s>o?s:o,g=s>o?1:s/o,p=s>o?o/s:1;t&&(t.translate(n,a),t.rotate(c),t.scale(g,p),t.arc(0,0,f,u,u+h,Boolean(1-l)),t.scale(1/g,1/p),t.rotate(-c),t.translate(-n,-a));break;case Dt.CLOSE_PATH:t&&t.closePath()}})}renderChildren(t){this.setTextData(t),t.save();var e=this.parent.getStyle("text-decoration").getString(),r=this.getFontSize(),{glyphInfo:i}=this,n=t.fillStyle;"underline"===e&&t.beginPath(),i.forEach((i,n)=>{var{p0:a,p1:s,rotation:o,text:u}=i;t.save(),t.translate(a.x,a.y),t.rotate(o),t.fillStyle&&t.fillText(u,0,0),t.strokeStyle&&t.strokeText(u,0,0),t.restore(),"underline"===e&&(0===n&&t.moveTo(a.x,a.y+r/8),t.lineTo(s.x,s.y+r/5))}),"underline"===e&&(t.lineWidth=r/20,t.strokeStyle=n,t.stroke(),t.closePath()),t.restore()}getLetterSpacingAt(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return this.letterSpacingCache[t]||0}findSegmentToFitChar(t,e,r,i,n,a,s,o,u){var h=a,c=this.measureText(t,o);" "===o&&"justify"===e&&r<i&&(c+=(i-r)/n),u>-1&&(h+=this.getLetterSpacingAt(u));var l=this.textHeight/20,f=this.getEquidistantPointOnPath(h,l,0),g=this.getEquidistantPointOnPath(h+c,l,0),p={p0:f,p1:g},d=f&&g?Math.atan2(g.y-f.y,g.x-f.x):0;if(s){var v=Math.cos(Math.PI/2+d)*s,y=Math.cos(-d)*s;p.p0=pe(pe({},f),{},{x:f.x+v,y:f.y+y}),p.p1=pe(pe({},g),{},{x:g.x+v,y:g.y+y})}return{offset:h+=c,segment:p,rotation:d}}measureText(t,e){var{measuresCache:r}=this,i=e||this.getText();if(r.has(i))return r.get(i);var n=this.measureTargetText(t,i);return r.set(i,n),n}setTextData(t){if(!this.glyphInfo){var e=this.getText(),r=e.split(""),i=e.split(" ").length-1,n=this.parent.getAttribute("dx").split().map(t=>t.getPixels("x")),a=this.parent.getAttribute("dy").getPixels("y"),s=this.parent.getStyle("text-anchor").getString("start"),o=this.getStyle("letter-spacing"),u=this.parent.getStyle("letter-spacing"),h=0;o.hasValue()&&"inherit"!==o.getValue()?o.hasValue()&&"initial"!==o.getValue()&&"unset"!==o.getValue()&&(h=o.getPixels()):h=u.getPixels();var c=[],l=e.length;this.letterSpacingCache=c;for(var f=0;f<l;f++)c.push(void 0!==n[f]?n[f]:h);var g=c.reduce((t,e,r)=>0===r?0:t+e||0,0),p=this.measureText(t),d=Math.max(p+g,0);this.textWidth=p,this.textHeight=this.getFontSize(),this.glyphInfo=[];var v=this.getPathLength(),y=this.getStyle("startOffset").getNumber(0)*v,m=0;"middle"!==s&&"center"!==s||(m=-d/2),"end"!==s&&"right"!==s||(m=-d),m+=y,r.forEach((e,n)=>{var{offset:o,segment:u,rotation:h}=this.findSegmentToFitChar(t,s,d,v,i,m,a,e,n);m=o,u.p0&&u.p1&&this.glyphInfo.push({text:r[n],p0:u.p0,p1:u.p1,rotation:h})})}}parsePathData(t){if(this.pathLength=-1,!t)return[];var e=[],{pathParser:r}=t;for(r.reset();!r.isEnd();){var{current:i}=r,n=i?i.x:0,a=i?i.y:0,s=r.next(),o=s.type,u=[];switch(s.type){case Dt.MOVE_TO:this.pathM(r,u);break;case Dt.LINE_TO:o=this.pathL(r,u);break;case Dt.HORIZ_LINE_TO:o=this.pathH(r,u);break;case Dt.VERT_LINE_TO:o=this.pathV(r,u);break;case Dt.CURVE_TO:this.pathC(r,u);break;case Dt.SMOOTH_CURVE_TO:o=this.pathS(r,u);break;case Dt.QUAD_TO:this.pathQ(r,u);break;case Dt.SMOOTH_QUAD_TO:o=this.pathT(r,u);break;case Dt.ARC:u=this.pathA(r);break;case Dt.CLOSE_PATH:jt.pathZ(r)}s.type!==Dt.CLOSE_PATH?e.push({type:o,points:u,start:{x:n,y:a},pathLength:this.calcLength(n,a,o,u)}):e.push({type:Dt.CLOSE_PATH,points:[],pathLength:0})}return e}pathM(t,e){var{x:r,y:i}=jt.pathM(t).point;e.push(r,i)}pathL(t,e){var{x:r,y:i}=jt.pathL(t).point;return e.push(r,i),Dt.LINE_TO}pathH(t,e){var{x:r,y:i}=jt.pathH(t).point;return e.push(r,i),Dt.LINE_TO}pathV(t,e){var{x:r,y:i}=jt.pathV(t).point;return e.push(r,i),Dt.LINE_TO}pathC(t,e){var{point:r,controlPoint:i,currentPoint:n}=jt.pathC(t);e.push(r.x,r.y,i.x,i.y,n.x,n.y)}pathS(t,e){var{point:r,controlPoint:i,currentPoint:n}=jt.pathS(t);return e.push(r.x,r.y,i.x,i.y,n.x,n.y),Dt.CURVE_TO}pathQ(t,e){var{controlPoint:r,currentPoint:i}=jt.pathQ(t);e.push(r.x,r.y,i.x,i.y)}pathT(t,e){var{controlPoint:r,currentPoint:i}=jt.pathT(t);return e.push(r.x,r.y,i.x,i.y),Dt.QUAD_TO}pathA(t){var{rX:e,rY:r,sweepFlag:i,xAxisRotation:n,centp:a,a1:s,ad:o}=jt.pathA(t);return 0===i&&o>0&&(o-=2*Math.PI),1===i&&o<0&&(o+=2*Math.PI),[a.x,a.y,e,r,s,o,n,i]}calcLength(t,e,r,i){var n=0,a=null,s=null,o=0;switch(r){case Dt.LINE_TO:return this.getLineLength(t,e,i[0],i[1]);case Dt.CURVE_TO:for(n=0,a=this.getPointOnCubicBezier(0,t,e,i[0],i[1],i[2],i[3],i[4],i[5]),o=.01;o<=1;o+=.01)s=this.getPointOnCubicBezier(o,t,e,i[0],i[1],i[2],i[3],i[4],i[5]),n+=this.getLineLength(a.x,a.y,s.x,s.y),a=s;return n;case Dt.QUAD_TO:for(n=0,a=this.getPointOnQuadraticBezier(0,t,e,i[0],i[1],i[2],i[3]),o=.01;o<=1;o+=.01)s=this.getPointOnQuadraticBezier(o,t,e,i[0],i[1],i[2],i[3]),n+=this.getLineLength(a.x,a.y,s.x,s.y),a=s;return n;case Dt.ARC:n=0;var u=i[4],h=i[5],c=i[4]+h,l=Math.PI/180;if(Math.abs(u-c)<l&&(l=Math.abs(u-c)),a=this.getPointOnEllipticalArc(i[0],i[1],i[2],i[3],u,0),h<0)for(o=u-l;o>c;o-=l)s=this.getPointOnEllipticalArc(i[0],i[1],i[2],i[3],o,0),n+=this.getLineLength(a.x,a.y,s.x,s.y),a=s;else for(o=u+l;o<c;o+=l)s=this.getPointOnEllipticalArc(i[0],i[1],i[2],i[3],o,0),n+=this.getLineLength(a.x,a.y,s.x,s.y),a=s;return s=this.getPointOnEllipticalArc(i[0],i[1],i[2],i[3],c,0),n+=this.getLineLength(a.x,a.y,s.x,s.y)}return 0}getPointOnLine(t,e,r,i,n){var a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:e,s=arguments.length>6&&void 0!==arguments[6]?arguments[6]:r,o=(n-r)/(i-e+et),u=Math.sqrt(t*t/(1+o*o));i<e&&(u*=-1);var h=o*u,c=null;if(i===e)c={x:a,y:s+h};else if((s-r)/(a-e+et)===o)c={x:a+u,y:s+h};else{var l,f,g=this.getLineLength(e,r,i,n);if(g<et)return null;var p=(a-e)*(i-e)+(s-r)*(n-r);l=e+(p/=g*g)*(i-e),f=r+p*(n-r);var d=this.getLineLength(a,s,l,f),v=Math.sqrt(t*t-d*d);u=Math.sqrt(v*v/(1+o*o)),i<e&&(u*=-1),c={x:l+u,y:f+(h=o*u)}}return c}getPointOnPath(t){var e=this.getPathLength(),r=0,i=null;if(t<-5e-5||t-5e-5>e)return null;var{dataArray:n}=this;for(var a of n){if(!a||!(a.pathLength<5e-5||r+a.pathLength+5e-5<t)){var s=t-r,o=0;switch(a.type){case Dt.LINE_TO:i=this.getPointOnLine(s,a.start.x,a.start.y,a.points[0],a.points[1],a.start.x,a.start.y);break;case Dt.ARC:var u=a.points[4],h=a.points[5],c=a.points[4]+h;if(o=u+s/a.pathLength*h,h<0&&o<c||h>=0&&o>c)break;i=this.getPointOnEllipticalArc(a.points[0],a.points[1],a.points[2],a.points[3],o,a.points[6]);break;case Dt.CURVE_TO:(o=s/a.pathLength)>1&&(o=1),i=this.getPointOnCubicBezier(o,a.start.x,a.start.y,a.points[0],a.points[1],a.points[2],a.points[3],a.points[4],a.points[5]);break;case Dt.QUAD_TO:(o=s/a.pathLength)>1&&(o=1),i=this.getPointOnQuadraticBezier(o,a.start.x,a.start.y,a.points[0],a.points[1],a.points[2],a.points[3])}if(i)return i;break}r+=a.pathLength}return null}getLineLength(t,e,r,i){return Math.sqrt((r-t)*(r-t)+(i-e)*(i-e))}getPathLength(){return-1===this.pathLength&&(this.pathLength=this.dataArray.reduce((t,e)=>e.pathLength>0?t+e.pathLength:t,0)),this.pathLength}getPointOnCubicBezier(t,e,r,i,n,a,s,o,u){return{x:o*at(t)+a*st(t)+i*ot(t)+e*ut(t),y:u*at(t)+s*st(t)+n*ot(t)+r*ut(t)}}getPointOnQuadraticBezier(t,e,r,i,n,a,s){return{x:a*ht(t)+i*ct(t)+e*lt(t),y:s*ht(t)+n*ct(t)+r*lt(t)}}getPointOnEllipticalArc(t,e,r,i,n,a){var s=Math.cos(a),o=Math.sin(a),u=r*Math.cos(n),h=i*Math.sin(n);return{x:t+(u*s-h*o),y:e+(u*o+h*s)}}buildEquidistantCache(t,e){var r=this.getPathLength(),i=e||.25,n=t||r/100;if(!this.equidistantCache||this.equidistantCache.step!==n||this.equidistantCache.precision!==i){this.equidistantCache={step:n,precision:i,points:[]};for(var a=0,s=0;s<=r;s+=i){var o=this.getPointOnPath(s),u=this.getPointOnPath(s+i);o&&u&&((a+=this.getLineLength(o.x,o.y,u.x,u.y))>=n&&(this.equidistantCache.points.push({x:o.x,y:o.y,distance:s}),a-=n))}}}getEquidistantPointOnPath(t,e,r){if(this.buildEquidistantCache(e,r),t<0||t-this.getPathLength()>5e-5)return null;var i=Math.round(t/this.getPathLength()*(this.equidistantCache.points.length-1));return this.equidistantCache.points[i]||null}}var ve=/^\s*data:(([^/,;]+\/[^/,;]+)(?:;([^,;=]+=[^,;=]+))?)?(?:;(base64))?,(.*)$/i;class ye extends Bt{constructor(t,e,r){super(t,e,r),this.type="image",this.loaded=!1;var i=this.getHrefAttribute().getString();if(i){var n=i.endsWith(".svg")||/^\s*data:image\/svg\+xml/i.test(i);t.images.push(this),n?this.loadSvg(i):this.loadImage(i),this.isSvg=n}}loadImage(t){var e=this;return n()((function*(){try{var r=yield e.document.createImage(t);e.image=r}catch(e){console.error('Error while loading image "'.concat(t,'":'),e)}e.loaded=!0}))()}loadSvg(t){var e=this;return n()((function*(){var r=ve.exec(t);if(r){var i=r[5];"base64"===r[4]?e.image=atob(i):e.image=decodeURIComponent(i)}else try{var n=yield e.document.fetch(t),a=yield n.text();e.image=a}catch(e){console.error('Error while loading image "'.concat(t,'":'),e)}e.loaded=!0}))()}renderChildren(t){var{document:e,image:r,loaded:i}=this,n=this.getAttribute("x").getPixels("x"),a=this.getAttribute("y").getPixels("y"),s=this.getStyle("width").getPixels("x"),o=this.getStyle("height").getPixels("y");if(i&&r&&s&&o){if(t.save(),t.translate(n,a),this.isSvg){var u=e.canvg.forkString(t,this.image,{ignoreMouse:!0,ignoreAnimation:!0,ignoreDimensions:!0,ignoreClear:!0,offsetX:0,offsetY:0,scaleWidth:s,scaleHeight:o});u.document.documentElement.parent=this,u.render()}else{var h=this.image;e.setViewBox({ctx:t,aspectRatio:this.getAttribute("preserveAspectRatio").getString(),width:s,desiredWidth:h.width,height:o,desiredHeight:h.height}),this.loaded&&(void 0===h.complete||h.complete)&&t.drawImage(h,0,0)}t.restore()}}getBoundingBox(){var t=this.getAttribute("x").getPixels("x"),e=this.getAttribute("y").getPixels("y"),r=this.getStyle("width").getPixels("x"),i=this.getStyle("height").getPixels("y");return new Lt(t,e,t+r,e+i)}}class me extends Bt{constructor(){super(...arguments),this.type="symbol"}render(t){}}class xe{constructor(t){this.document=t,this.loaded=!1,t.fonts.push(this)}load(t,e){var r=this;return n()((function*(){try{var{document:i}=r,n=(yield i.canvg.parser.load(e)).getElementsByTagName("font");Array.from(n).forEach(e=>{var r=i.createElement(e);i.definitions[t]=r})}catch(t){console.error('Error while loading font "'.concat(e,'":'),t)}r.loaded=!0}))()}}class be extends Nt{constructor(t,e,r){super(t,e,r),this.type="style",B(Array.from(e.childNodes).map(t=>t.textContent).join("").replace(/(\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\/)|(^[\s]*\/\/.*)/gm,"").replace(/@import.*;/g,"")).split("}").forEach(e=>{var r=e.trim();if(r){var i=r.split("{"),n=i[0].split(","),a=i[1].split(";");n.forEach(e=>{var r=e.trim();if(r){var i=t.styles[r]||{};if(a.forEach(e=>{var r=e.indexOf(":"),n=e.substr(0,r).trim(),a=e.substr(r+1,e.length-r).trim();n&&a&&(i[n]=new ft(t,n,a))}),t.styles[r]=i,t.stylesSpecificity[r]=tt(r),"@font-face"===r){var n=i["font-family"].getString().replace(/"|'/g,"");i.src.getString().split(",").forEach(e=>{if(e.indexOf('format("svg")')>0){var r=X(e);r&&new xe(t).load(n,r)}})}}})}})}}be.parseExternalUrl=X;class we extends Bt{constructor(){super(...arguments),this.type="use"}setContext(t){super.setContext(t);var e=this.getAttribute("x"),r=this.getAttribute("y");e.hasValue()&&t.translate(e.getPixels("x"),0),r.hasValue()&&t.translate(0,r.getPixels("y"))}path(t){var{element:e}=this;e&&e.path(t)}renderChildren(t){var{document:e,element:r}=this;if(r){var i=r;if("symbol"===r.type&&((i=new Xt(e,null)).attributes.viewBox=new ft(e,"viewBox",r.getAttribute("viewBox").getString()),i.attributes.preserveAspectRatio=new ft(e,"preserveAspectRatio",r.getAttribute("preserveAspectRatio").getString()),i.attributes.overflow=new ft(e,"overflow",r.getAttribute("overflow").getString()),i.children=r.children,r.styles.opacity=new ft(e,"opacity",this.calculateOpacity())),"svg"===i.type){var n=this.getStyle("width",!1,!0),a=this.getStyle("height",!1,!0);n.hasValue()&&(i.attributes.width=new ft(e,"width",n.getString())),a.hasValue()&&(i.attributes.height=new ft(e,"height",a.getString()))}var s=i.parent;i.parent=this,i.render(t),i.parent=s}}getBoundingBox(t){var{element:e}=this;return e?e.getBoundingBox(t):null}elementTransform(){var{document:t,element:e}=this;return Mt.fromElement(t,e)}get element(){return this.cachedElement||(this.cachedElement=this.getHrefAttribute().getDefinition()),this.cachedElement}}function Se(t,e,r,i,n,a){return t[r*i*4+4*e+a]}function Te(t,e,r,i,n,a,s){t[r*i*4+4*e+a]=s}function Ae(t,e,r){return t[e]*r}function Oe(t,e,r,i){return e+Math.cos(t)*r+Math.sin(t)*i}class Pe extends Nt{constructor(t,e,r){super(t,e,r),this.type="feColorMatrix";var i=F(this.getAttribute("values").getString());switch(this.getAttribute("type").getString("matrix")){case"saturate":var n=i[0];i=[.213+.787*n,.715-.715*n,.072-.072*n,0,0,.213-.213*n,.715+.285*n,.072-.072*n,0,0,.213-.213*n,.715-.715*n,.072+.928*n,0,0,0,0,0,1,0,0,0,0,0,1];break;case"hueRotate":var a=i[0]*Math.PI/180;i=[Oe(a,.213,.787,-.213),Oe(a,.715,-.715,-.715),Oe(a,.072,-.072,.928),0,0,Oe(a,.213,-.213,.143),Oe(a,.715,.285,.14),Oe(a,.072,-.072,-.283),0,0,Oe(a,.213,-.213,-.787),Oe(a,.715,-.715,.715),Oe(a,.072,.928,.072),0,0,0,0,0,1,0,0,0,0,0,1];break;case"luminanceToAlpha":i=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,.2125,.7154,.0721,0,0,0,0,0,0,1]}this.matrix=i,this.includeOpacity=this.getAttribute("includeOpacity").hasValue()}apply(t,e,r,i,n){for(var{includeOpacity:a,matrix:s}=this,o=t.getImageData(0,0,i,n),u=0;u<n;u++)for(var h=0;h<i;h++){var c=Se(o.data,h,u,i,0,0),l=Se(o.data,h,u,i,0,1),f=Se(o.data,h,u,i,0,2),g=Se(o.data,h,u,i,0,3),p=Ae(s,0,c)+Ae(s,1,l)+Ae(s,2,f)+Ae(s,3,g)+Ae(s,4,1),d=Ae(s,5,c)+Ae(s,6,l)+Ae(s,7,f)+Ae(s,8,g)+Ae(s,9,1),v=Ae(s,10,c)+Ae(s,11,l)+Ae(s,12,f)+Ae(s,13,g)+Ae(s,14,1),y=Ae(s,15,c)+Ae(s,16,l)+Ae(s,17,f)+Ae(s,18,g)+Ae(s,19,1);a&&(p=0,d=0,v=0,y*=g/255),Te(o.data,h,u,i,0,0,p),Te(o.data,h,u,i,0,1,d),Te(o.data,h,u,i,0,2,v),Te(o.data,h,u,i,0,3,y)}t.clearRect(0,0,i,n),t.putImageData(o,0,0)}}class Ee extends Nt{constructor(){super(...arguments),this.type="mask"}apply(t,e){var{document:r}=this,i=this.getAttribute("x").getPixels("x"),n=this.getAttribute("y").getPixels("y"),a=this.getStyle("width").getPixels("x"),s=this.getStyle("height").getPixels("y");if(!a&&!s){var o=new Lt;this.children.forEach(e=>{o.addBoundingBox(e.getBoundingBox(t))}),i=Math.floor(o.x1),n=Math.floor(o.y1),a=Math.floor(o.width),s=Math.floor(o.height)}var u=this.removeStyles(e,Ee.ignoreStyles),h=r.createCanvas(i+a,n+s),c=h.getContext("2d");r.screen.setDefaults(c),this.renderChildren(c),new Pe(r,{nodeType:1,childNodes:[],attributes:[{nodeName:"type",value:"luminanceToAlpha"},{nodeName:"includeOpacity",value:"true"}]}).apply(c,0,0,i+a,n+s);var l=r.createCanvas(i+a,n+s),f=l.getContext("2d");r.screen.setDefaults(f),e.render(f),f.globalCompositeOperation="destination-in",f.fillStyle=c.createPattern(h,"no-repeat"),f.fillRect(0,0,i+a,n+s),t.fillStyle=f.createPattern(l,"no-repeat"),t.fillRect(0,0,i+a,n+s),this.restoreStyles(e,u)}render(t){}}Ee.ignoreStyles=["mask","transform","clip-path"];var Ce=()=>{};class Me extends Nt{constructor(){super(...arguments),this.type="clipPath"}apply(t){var{document:e}=this,r=Reflect.getPrototypeOf(t),{beginPath:i,closePath:n}=t;r&&(r.beginPath=Ce,r.closePath=Ce),Reflect.apply(i,t,[]),this.children.forEach(i=>{if(void 0!==i.path){var a=void 0!==i.elementTransform?i.elementTransform():null;a||(a=Mt.fromElement(e,i)),a&&a.apply(t),i.path(t),r&&(r.closePath=n),a&&a.unapply(t)}}),Reflect.apply(n,t,[]),t.clip(),r&&(r.beginPath=i,r.closePath=n)}render(t){}}class Ne extends Nt{constructor(){super(...arguments),this.type="filter"}apply(t,e){var{document:r,children:i}=this,n=e.getBoundingBox(t);if(n){var a=0,s=0;i.forEach(t=>{var e=t.extraFilterDistance||0;a=Math.max(a,e),s=Math.max(s,e)});var o=Math.floor(n.width),u=Math.floor(n.height),h=o+2*a,c=u+2*s;if(!(h<1||c<1)){var l=Math.floor(n.x),f=Math.floor(n.y),g=this.removeStyles(e,Ne.ignoreStyles),p=r.createCanvas(h,c),d=p.getContext("2d");r.screen.setDefaults(d),d.translate(-l+a,-f+s),e.render(d),i.forEach(t=>{"function"==typeof t.apply&&t.apply(d,0,0,h,c)}),t.drawImage(p,0,0,h,c,l-a,f-s,h,c),this.restoreStyles(e,g)}}}render(t){}}Ne.ignoreStyles=["filter","transform","clip-path"];class _e extends Nt{constructor(t,e,r){super(t,e,r),this.type="feDropShadow",this.addStylesFromStyleDefinition()}apply(t,e,r,i,n){}}class Ve extends Nt{constructor(){super(...arguments),this.type="feMorphology"}apply(t,e,r,i,n){}}class Re extends Nt{constructor(){super(...arguments),this.type="feComposite"}apply(t,e,r,i,n){}}class ke extends Nt{constructor(t,e,r){super(t,e,r),this.type="feGaussianBlur",this.blurRadius=Math.floor(this.getAttribute("stdDeviation").getNumber()),this.extraFilterDistance=this.blurRadius}apply(t,e,r,i,n){var{document:a,blurRadius:s}=this,o=a.window?a.window.document.body:null,u=t.canvas;u.id=a.getUniqueId(),o&&(u.style.display="none",o.appendChild(u)),I(u,e,r,i,n,s),o&&o.removeChild(u)}}class Ie extends Nt{constructor(){super(...arguments),this.type="title"}}class Le extends Nt{constructor(){super(...arguments),this.type="desc"}}var De={svg:Xt,rect:Yt,circle:qt,ellipse:Wt,line:Gt,polyline:Qt,polygon:$t,path:jt,pattern:Zt,marker:Kt,defs:Jt,linearGradient:re,radialGradient:ie,stop:ne,animate:ae,animateColor:se,animateTransform:oe,font:ue,"font-face":he,"missing-glyph":ce,glyph:zt,text:Ft,tspan:Ut,tref:le,a:fe,textPath:de,image:ye,g:te,symbol:me,style:be,use:we,mask:Ee,clipPath:Me,filter:Ne,feDropShadow:_e,feMorphology:Ve,feComposite:Re,feColorMatrix:Pe,feGaussianBlur:ke,title:Ie,desc:Le};function Be(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,i)}return r}function je(){return(je=n()((function*(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=document.createElement("img");return e&&(r.crossOrigin="Anonymous"),new Promise((e,i)=>{r.onload=()=>{e(r)},r.onerror=(t,e,r,n,a)=>{i(a)},r.src=t})}))).apply(this,arguments)}class ze{constructor(t){var{rootEmSize:e=12,emSize:r=12,createCanvas:i=ze.createCanvas,createImage:n=ze.createImage,anonymousCrossOrigin:a}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.canvg=t,this.definitions={},this.styles={},this.stylesSpecificity={},this.images=[],this.fonts=[],this.emSizeStack=[],this.uniqueId=0,this.screen=t.screen,this.rootEmSize=e,this.emSize=r,this.createCanvas=i,this.createImage=this.bindCreateImage(n,a),this.screen.wait(this.isImagesLoaded.bind(this)),this.screen.wait(this.isFontsLoaded.bind(this))}bindCreateImage(t,e){return"boolean"==typeof e?(r,i)=>t(r,"boolean"==typeof i?i:e):t}get window(){return this.screen.window}get fetch(){return this.screen.fetch}get ctx(){return this.screen.ctx}get emSize(){var{emSizeStack:t}=this;return t[t.length-1]}set emSize(t){var{emSizeStack:e}=this;e.push(t)}popEmSize(){var{emSizeStack:t}=this;t.pop()}getUniqueId(){return"canvg".concat(++this.uniqueId)}isImagesLoaded(){return this.images.every(t=>t.loaded)}isFontsLoaded(){return this.fonts.every(t=>t.loaded)}createDocumentElement(t){var e=this.createElement(t.documentElement);return e.root=!0,e.addStylesFromStyleDefinition(),this.documentElement=e,e}createElement(t){var e=t.nodeName.replace(/^[^:]+:/,""),r=ze.elementTypes[e];return void 0!==r?new r(this,t):new _t(this,t)}createTextNode(t){return new Ht(this,t)}setViewBox(t){this.screen.setViewBox(function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Be(Object(r),!0).forEach((function(e){s()(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Be(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}({document:this},t))}}function Fe(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,i)}return r}function Ue(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Fe(Object(r),!0).forEach((function(e){s()(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Fe(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}ze.createCanvas=function(t,e){var r=document.createElement("canvas");return r.width=t,r.height=e,r},ze.createImage=function(t){return je.apply(this,arguments)},ze.elementTypes=De;class He{constructor(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};this.parser=new wt(r),this.screen=new mt(t,r),this.options=r;var i=new ze(this,r),n=i.createDocumentElement(e);this.document=i,this.documentElement=n}static from(t,e){var r=arguments;return n()((function*(){var i=r.length>2&&void 0!==r[2]?r[2]:{},n=new wt(i),a=yield n.parse(e);return new He(t,a,i)}))()}static fromString(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=new wt(r).parseFromString(e);return new He(t,i,r)}fork(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return He.from(t,e,Ue(Ue({},this.options),r))}forkString(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return He.fromString(t,e,Ue(Ue({},this.options),r))}ready(){return this.screen.ready()}isReady(){return this.screen.isReady()}render(){var t=arguments,e=this;return n()((function*(){var r=t.length>0&&void 0!==t[0]?t[0]:{};e.start(Ue({enableRedraw:!0,ignoreAnimation:!0,ignoreMouse:!0},r)),yield e.ready(),e.stop()}))()}start(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{documentElement:e,screen:r,options:i}=this;r.start(e,Ue(Ue({enableRedraw:!0},i),t))}stop(){this.screen.stop()}resize(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];this.documentElement.resize(t,e,r)}}e.default=He}])]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,